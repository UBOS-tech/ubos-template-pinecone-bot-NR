[
    {
        "id": "c8208e6a65d3c2af",
        "type": "tab",
        "label": "Bot ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "33ad232901cfdd1c",
        "type": "tab",
        "label": "Links",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4004e7d2fbdbf6a9",
        "type": "tab",
        "label": "admin pages",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f4036141cc030bcf",
        "type": "tab",
        "label": "Auth",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4cba6f8219137af4",
        "type": "tab",
        "label": "Settings",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8bea414da58d7b2a",
        "type": "tab",
        "label": "Base",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a36ef6d92fe6c77f",
        "type": "subflow",
        "name": "initialMain",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 80,
                "wires": [
                    {
                        "id": "9c118fcdb9ebf1db"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 80,
                "wires": [
                    {
                        "id": "9c118fcdb9ebf1db",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0DEED",
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "86999827f4132436",
        "type": "subflow",
        "name": "checkAuthFM",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 120,
                "wires": [
                    {
                        "id": "01973285a9ece7ee"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 100,
                "wires": [
                    {
                        "id": "01973285a9ece7ee",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "icon": "font-awesome/fa-check-square"
    },
    {
        "id": "be0e91eaeda9e45d",
        "type": "subflow",
        "name": "checkAuthFM",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 120,
                "wires": [
                    {
                        "id": "8afec29839d2345a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 100,
                "wires": [
                    {
                        "id": "8afec29839d2345a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#ff4433",
        "icon": "font-awesome/fa-file-image-o"
    },
    {
        "id": "752a8b5a286babe5",
        "type": "group",
        "z": "f4036141cc030bcf",
        "name": "Roles",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "14b59f3691ef69ba",
            "84a0df2970ba557a",
            "399a4d9543fe95a1",
            "8b8038ef3ffa67dc",
            "a2903e704c5feffd",
            "cf996b8f5729052e",
            "bb8c3b11be10027d",
            "98ea56df1bdf7663",
            "5e4d4597f4c69b03",
            "669f5378dc89b756",
            "f8d3962a2d3d4295",
            "da93f58c9901602e",
            "c1327a786ae3deed",
            "9af1975a343bc582",
            "1a8d5dbb5642beda",
            "18133ecfe411d7f0",
            "d7b0e35cdd28547a",
            "7510771007812d39",
            "2cceb3d0a93343d8",
            "1383178398d4778b",
            "777f378a36dc63f0",
            "ee0773620e14dc5e",
            "c387f054fc1d8ef2",
            "9fe78a1700cc52d7",
            "83c8060a7ab3bf27",
            "a79b5a026be5770c",
            "22c15e1e7bf3a3ca",
            "d66bda1905ec670a",
            "f8956004b58baaad",
            "78b779b42c51cffb",
            "753babafc6ec97fd",
            "881a3a438a261f6f"
        ],
        "x": 14,
        "y": 1139
    },
    {
        "id": "7cf09a5628ba29e5",
        "type": "group",
        "z": "f4036141cc030bcf",
        "name": "Authorization",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "4f0b3da36fb0040c",
            "5fd1692f7e8d87b5",
            "abfb844120e384b4",
            "62a0db821ee1373d",
            "0791faf1cee2fe7f",
            "c4b1bd96421d0281",
            "cd1dfd3d06c80ef4",
            "e78bfdb95d2722e4",
            "91e2852778907a59",
            "268b887a3da70c7d",
            "7e24ab9c80ca59ea",
            "f7a7e47f575cc20f",
            "2c60c99cba5d66e8",
            "7822047ac02138e4",
            "e80f4ed8349b066e",
            "c86dcb9df78cebf6",
            "bdd3c6716bf4d72a",
            "ad274da8cc3c3022",
            "2a1cf553e1e9ec78",
            "dfd63696a37ed3ef",
            "63e96537c28f9852",
            "caff712e2eb791e2",
            "8e793c55c7af2219",
            "43a4fd40f853d3a1",
            "61ea6b2dafed34ff",
            "8ebd248a8eed9491",
            "9bdeada5928fdb22",
            "8c5efef801cc1dc0",
            "1b70be2e868d8c04",
            "30eee249014d5f9c",
            "d3246b62cc5c7d48",
            "c3b9152502b0b7de",
            "b33db8bb0f9df1e6",
            "7bb68135adb77b5f",
            "d5ece23b520b810f",
            "3664e53bb83334c6",
            "f36403b4bdb0a3b9",
            "c8359b5d14016069",
            "5d9628083a55b25a",
            "1aa6084c940d35b0",
            "a9c57cc5fea578f4",
            "16b45fd91269424a",
            "8e724f7bfa9319f6",
            "6ab136250b17e86c",
            "1f52497bc2ed6264",
            "baba729d5c88e013",
            "f4e52f3a41956c87",
            "25b819b5a56c3054",
            "3443d8e7d57ade22",
            "7d7b3c509b17950d",
            "d1143196b526568d",
            "dca099b2fda6a31e",
            "612c15931c94db0f",
            "2a9c245b96099f4e",
            "faaade0d0c380b57",
            "84a3404c5002c4f7",
            "eeceed583550e3fa",
            "621d5d5a41669c64",
            "d5af917bfe74ba4c",
            "65b608719a7b1d8f",
            "12507e3542cead46",
            "52911e87debd8301",
            "7d24a5806739b5fb",
            "fca1a6e7c2a907ba",
            "38264f88df3f51f8",
            "4f4233c2503ef413",
            "3f2728a428f70979",
            "787c14ff2d5c5657",
            "72dddb2443952553",
            "8cbf4dcd5bda929e",
            "56afed1bb13cc979"
        ],
        "x": 14,
        "y": 39
    },
    {
        "id": "d47c4baf98dd7d3b",
        "type": "group",
        "z": "f4036141cc030bcf",
        "name": "Confirm Email Registration",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "8bf11e1db155c406",
            "b19133390f7fff7a",
            "28e417acf6703c8e",
            "f05c31a436d493c1",
            "15bc335d0fad3f03",
            "38300e6abcb36ac3",
            "a7b60ea648465b13",
            "2ebbf3d403304123",
            "f8ac81b8f44aa1c1",
            "4ca2aafdce75631b"
        ],
        "x": 774,
        "y": 1139
    },
    {
        "id": "b69c8ee37e3e0852",
        "type": "group",
        "z": "f4036141cc030bcf",
        "name": "Reset Paaword",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ab301c55037892a5",
            "33cd63d87b4e381c",
            "de3eb89f39a1530a",
            "c48a80eca03bbba4",
            "c3173697fb7f4bac",
            "348f8ae5da73c0d5",
            "15933ef85e8b2695",
            "b89f08cda462a95f",
            "9fec925d9c6148b0",
            "0614831a6dd18bbb",
            "0b8815511f027788",
            "acc53e48e5c37796",
            "a64da465eda134a3",
            "3839f7c847da4d06",
            "2757cb2a62d54166",
            "f949b57456c57058",
            "8427d42401796f0a",
            "ca3b0d180179516b",
            "f0fde05b39c69287",
            "cb0efb585b6584ea",
            "5b474b857331162b",
            "216c8a6f073f5011",
            "47112228019a0ace",
            "73896d5cbf2b11df",
            "8bd61a8f68025413",
            "faf358394ddc4fe6",
            "e5a3c3eb0171a5bd",
            "f393416741ceb5bb",
            "f94300e01993e46c",
            "1e3f1d731ea39467",
            "36f9a70a94832862",
            "030414dfd3ed59a5",
            "fcb9bc55f1082cf3",
            "c5b4ccce77d03e87",
            "0617a8c9543f9896",
            "6ed5acebd2a44763",
            "5322da50da8b810a"
        ],
        "x": 774,
        "y": 1339
    },
    {
        "id": "1c10aa09f2bae3b6",
        "type": "group",
        "z": "f4036141cc030bcf",
        "name": "User Management",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "f5be1263c0467e95",
            "e06c13c7edcdcd74",
            "e53113f64379a00a",
            "ac19deab86cb78e0",
            "4cbf03980d53b40c",
            "c905fee71d44c8d6",
            "cbe2971087f33fe5",
            "805f5b498ea3ba78",
            "751980e9e08597cb",
            "30c126c804b1a781",
            "ca45317f305a9e94",
            "11ae1973a48d1646",
            "9c4e434bd50c7629",
            "055f25983fece25e",
            "6f74a492cde629ef",
            "52c5f9f84fbd0e5a",
            "1cfa1bef551eea8c",
            "5a847e417c0b356f",
            "a09abdd606dfe92f",
            "e7b39c38c93e3854",
            "9159b9aa416b3084",
            "755a42caae4e1af0",
            "c6e9cd738f822557",
            "830a855b4d7f7858",
            "f1cc129781765941",
            "34bdf0171571de42",
            "8d02360a631dcfd2",
            "4db5cfe770e539c9",
            "b8b946c615b8106b",
            "db9c3ea65883774f"
        ],
        "x": 14,
        "y": 3039
    },
    {
        "id": "a89d39ed625d493a",
        "type": "group",
        "z": "f4036141cc030bcf",
        "name": "Modules",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "e7fd978ce87aca9f",
            "85568b61aa0c227a",
            "d70a394b4312d3ef",
            "5d71844b960e0965",
            "5c368970a09368c6",
            "aa8ef0110ab08941",
            "376174881ff1a55a",
            "061a5e02eefac437",
            "232d8d9e33cae211",
            "a52c0bddea4b8ea1",
            "1c83404957bea119",
            "6fbefd201f3acbfd",
            "4c265b78766e0676",
            "dc98a8249850bce2",
            "7800f240d6ce9d3c",
            "b29925263067250f",
            "9552e6aaf4e9e730",
            "f085a549ae9699b7",
            "2730235d0daf0113",
            "ace4106e83f92bd4",
            "3d521620d0c4a209",
            "c5a49592c2319b79",
            "69b2546c20e0f849",
            "c2b7abe6d2dfa874",
            "2c7eed711063667b",
            "e293cccc7303a4fe",
            "ae8e77cbc6311e1a",
            "ee6d35faa631e26d",
            "5f292bba63355586",
            "32729a9b111b8383",
            "4344a46a2b2adc00",
            "1cee9102777633e6",
            "133ba599444e0f8b",
            "d9f3e63efb88e1c2",
            "1d7ed8fcc9ca2114",
            "02e59b0e8b788849",
            "0fd0d2b6ef60273a",
            "aea44c2995d364d2",
            "0da57daeb8571c67",
            "bc255567ba2f7b55",
            "aed0f134a3d46198",
            "22995a8e4464c6e5"
        ],
        "x": 4,
        "y": 2079
    },
    {
        "id": "080a4b05e6b518fc",
        "type": "group",
        "z": "8bea414da58d7b2a",
        "name": "get files",
        "style": {
            "label": true
        },
        "nodes": [
            "796fcd0b58916758",
            "f7f33a86ce8d8fef",
            "11bec5f579b0b092",
            "4158be83830615bc",
            "c4f1d18b2c5d0eb7",
            "292d3caa5beb7778",
            "76f1fd55909c53ab",
            "5ec283479477abe6",
            "42505fe8cbd4e294",
            "b9c3655fb6f94525",
            "f6f04b7f237878d0",
            "862dc7094cc3702c",
            "cbd939371725f5c9",
            "db5662eacd7d9eb5",
            "1c2539fd446d3718",
            "2db2b245aa5eabb5",
            "29445d42adea56dc"
        ],
        "x": 1354,
        "y": 39,
        "w": 792,
        "h": 242
    },
    {
        "id": "0cf1026d3ccdfd21",
        "type": "group",
        "z": "c8208e6a65d3c2af",
        "name": "TG",
        "style": {
            "label": true
        },
        "nodes": [
            "666747ce63dfca18",
            "a71a7acbd224bbc2",
            "5c39762c2eac8a7e",
            "c1577d630be65884",
            "1d797e0280d34dfb",
            "569bafc9227ab6cd",
            "460b8b5ab15ecb0a",
            "06e39c64693b5051",
            "0177e3aab7653e72",
            "1b678c07805e900a",
            "59f43ba9fea18da2",
            "483948c77608cd63",
            "c9fb5769ca6ccbec",
            "09abf79dd626bde6",
            "47c066e4018176fa",
            "222395ae69864297",
            "f5d2d824f63b0eed",
            "fedf0aa9a67cbf02",
            "db7c93f50d03cd4e",
            "44b3fdac09e09d2a",
            "82e139d665440e8d",
            "991562c24c1dbb8a",
            "0b18dada9196baa4",
            "588935d38b66c7b2",
            "baf7420b5b216cc2",
            "62ddf71e3259e377",
            "1c79434061d7ff76",
            "93961f4aeda1b32c"
        ],
        "x": 34,
        "y": 179,
        "w": 2042,
        "h": 708
    },
    {
        "id": "e5c2a19a4e324330",
        "type": "group",
        "z": "8bea414da58d7b2a",
        "name": "Create vectors by type slice",
        "style": {
            "label": true
        },
        "nodes": [
            "686d5ff43aab4bf9",
            "e2f96b818dbf2d36",
            "805192a45b1dfb1f",
            "dedc8713aa88daf6",
            "7e3ff8422001942a",
            "cfa67c0faae732a5",
            "5ca28cbdb2d92066",
            "4be769eac39e255b",
            "0293ec9c022d79f4",
            "3a033404aaeb8479",
            "ba7d9ba90e21b85e",
            "81d103f3847b6d65",
            "cd0e561ad445f426",
            "958774fd3c549439",
            "f936d8bcc43cfdf6",
            "9eeda30ab8a3e81f",
            "752b7200cc83b1e2",
            "ed222f0c52f5bbc8",
            "32db447c7547eadb",
            "19ee5925125f783f",
            "9b9c70ad1de4b56b",
            "343d6eebe20761d7",
            "5372b1970127ad2f",
            "0d3eaa5926f77e21",
            "81c78fbc7d3217d5",
            "3745a86daf8b2d65",
            "bb4cc1dcf4246d5c",
            "f84baf671b6d2ba0",
            "6dbf6ccd83ab84de",
            "b70f23e2a0b3e562",
            "55cee18d243cb0dc",
            "3b529a0ad5978908",
            "a6174946dc747baa",
            "9917eac5b77b4506",
            "023264aec47fa267",
            "01868ecd3acf2961",
            "ca26229730123383",
            "35737464a5bac056",
            "f5a4b1e6a817c258",
            "d3e6e480f48e9893",
            "7aa9e7878f282bf1",
            "665c6273f8a9b9a1",
            "60a4af21e5faaa7d",
            "a5445e57033f03ab",
            "b6866d5174367b94",
            "0990db20b612b892",
            "5dd8bc6925a4d897",
            "4b6f1eb42b88da74",
            "45d050edcec39b86",
            "e53878b9d91108df",
            "f32249d89e195b2d",
            "c7f2f5bb0d1a1e78",
            "840dd35450baa020",
            "0582d87bd044fa4d",
            "4e16359d860b8ded",
            "f66c0120b1f03455",
            "5958b50f9d61ea4d",
            "2eb7416a949db88c",
            "250e9376a47d5b8a",
            "72475b4c21b7e944",
            "c0d0b57e2d701a7c",
            "79520be0bb6a7870",
            "0132fdd33de3b624",
            "0b3b3965772292fa",
            "e0a30529618286ca",
            "3191ff659fb73d78",
            "075cd5f3c274ca98",
            "358c2c2c2695f0ae",
            "162158f556a80497",
            "f4411d154ac1cb06",
            "e25c2d369acc6872",
            "34f72e23a62f55f9",
            "8bbeceb6411b448f",
            "bd7a3b08d4b90416",
            "2b0b88cae098c7a9"
        ],
        "x": 14,
        "y": 1039,
        "w": 2222,
        "h": 942
    },
    {
        "id": "1f1b365afc8becc5",
        "type": "group",
        "z": "8bea414da58d7b2a",
        "name": "Demo",
        "style": {
            "label": true
        },
        "nodes": [
            "6a8ed9cc40220ef6",
            "a686b4808141bbf4",
            "6140c878962dd22f",
            "abfb22b6518ab215",
            "512bf5fd33a8679d",
            "60e17ca1fd5bf59f",
            "6e171ee418466503",
            "434e200cd77ed275",
            "d83803be20e467e5"
        ],
        "x": 34,
        "y": 2359,
        "w": 1342,
        "h": 162
    },
    {
        "id": "911c1ee2586e9d4d",
        "type": "group",
        "z": "8bea414da58d7b2a",
        "name": "Save to pinecone",
        "style": {
            "label": true
        },
        "nodes": [
            "447d219e04f5c4e9",
            "7be5a588bfe35ac5",
            "6cb8466c8d27b038",
            "abf038af92f26537",
            "f79c4b87e3960cf9",
            "931545f90773e617",
            "0dd7f5e7c3f02753",
            "b453ce1aa8eb3e23",
            "6f43f46c6d6627e4",
            "fca11faee5518dfa",
            "96bc55efbe1eda75",
            "690ac56690a13aa4",
            "63d687c22b99e9d5",
            "b2634835a69a4769",
            "ed63a752615547a1"
        ],
        "x": 34,
        "y": 2019,
        "w": 1092,
        "h": 262
    },
    {
        "id": "bc79b0c55ed950a2",
        "type": "group",
        "z": "8bea414da58d7b2a",
        "name": "actions with vectors",
        "style": {
            "label": true
        },
        "nodes": [
            "21cbda1bf24a2a69",
            "19823422f5fa86c1",
            "48094b3f0e2ee8d9",
            "f152600620f043bd",
            "962290bc68cb0b29",
            "3ce9a2870ef10866",
            "14f30a7985cc31c8",
            "a69ae4c66f87b1f0",
            "4bfdfc1b314f7faa",
            "c19961b743cde705",
            "20ef169512cdd410",
            "f033b92e5ba13fcc",
            "8444301221890904",
            "d36889816ac0fe8e",
            "cf4156d5c447a16c",
            "9b5d8966c49993cd",
            "5a9cf18af75e3c0b",
            "5582346294319529",
            "cd48cc7a92b2a3d1",
            "bfd25775c6570faa",
            "d92184e6adc057c5",
            "d648ea43ba5a7657",
            "8c5c228aa9202f2b",
            "5bb720dc3ef56b7a",
            "99ad91f7fb16dfbc",
            "718ebd07aa298058",
            "c99c1f560bd3c907",
            "06b21e1c324bcb90",
            "5a3203eb955fd7d9"
        ],
        "x": 1354,
        "y": 319,
        "w": 932,
        "h": 622
    },
    {
        "id": "93961f4aeda1b32c",
        "type": "group",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "TG private chat ",
        "style": {
            "label": true
        },
        "nodes": [
            "d1fe775ad04641c1",
            "6bcf93306278ae07",
            "079317a7798ae7d0",
            "70d89be8294e4cc1",
            "e288b3035af24eaa",
            "ef767d928767cb70",
            "9406da99327c9644",
            "ca9798d997d772fd",
            "d10542b05ef1f56d",
            "d9ec1bb17c6cb2e5",
            "681ed7fd92333081",
            "7c1bf4b5923a9948",
            "1043346252c517a7",
            "17c46e8b98657bce",
            "2037f13cdb05275d",
            "78726ae519ab086a",
            "28c49149129d34ef",
            "6fae5298f072ae66",
            "42c541d584f35255",
            "8e058063d7977bdc",
            "c79f68ae78c2fa0a",
            "b5149a289a574835",
            "03eaa5c76a7cc0b0",
            "0b1926129388787b",
            "9fc1615f16cc61ed",
            "8fe93679b9f619bc"
        ],
        "x": 164,
        "y": 439,
        "w": 1582,
        "h": 422
    },
    {
        "id": "f492b6dff51635a4",
        "type": "group",
        "z": "8bea414da58d7b2a",
        "name": "Actions with Knowlege Base",
        "style": {
            "label": true
        },
        "nodes": [
            "9c630c78fbfe702f",
            "e9f90d7b7902781f",
            "1c1f174f8766fde7",
            "6bd7710803f1d820",
            "6fc91f5c4d0e3490",
            "7794a2dcd291f245",
            "771b80b405675487",
            "690fdc4d68fe1d5f",
            "18a42dddddf41c82",
            "f49f71f083baf7bb",
            "166fc8df26886326",
            "e2e224e9d9c8f414",
            "744c953cef4529af",
            "8408b89d02834f5b",
            "c4901f905e27c955",
            "19a23ca1d1daa384",
            "e8bcabbaf9f5fe0f",
            "2e3e257789bb525c",
            "f50bcabc95bf1078",
            "54d5461f44e49a0b",
            "bacb447dffc74ab2",
            "8549735ed2fe7cb9",
            "048a0a6024661886",
            "45ff3c83b4ab9c78",
            "12a9ae1d23901673",
            "d3d95030bea6cb46",
            "b43d308601b00756",
            "3b9cee03775bb4e2",
            "1c2bb360ac942ebc",
            "223ca06ca0f8571c",
            "9a230e7c818e0e24",
            "389c9d57e6764f40",
            "2f4beb7952be87f4",
            "ec1fa013809c2a8e",
            "b9a9ed30709f11c9",
            "463bc001e4ac3724",
            "24a270db9a48eed1",
            "9ccf501c4980a045",
            "1801d832c75cc75b",
            "69bd6d7e22148f1f",
            "0db93a79fec638c1",
            "6d2119a90f113bc7",
            "7ff484f04f036fae",
            "4bf450cf643022a7",
            "e3ac9e8aee2909b3",
            "33bd23245aa30043",
            "82a319adbb1186f9",
            "cdc9d2d5e10fc245",
            "ef20b72d14fc716d",
            "cce6afd14b41a461",
            "a0e0e2bf42c038d8",
            "12650f94df4b7bdb",
            "15dc2420f0bbb19f",
            "f967b27837fecfdd"
        ],
        "x": 14,
        "y": 59,
        "w": 1272,
        "h": 842
    },
    {
        "id": "4b07803a52e468f5",
        "type": "telegram bot",
        "botname": "{global.get('process_env').BOT_NAME}",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "9c118fcdb9ebf1db",
        "type": "function",
        "z": "a36ef6d92fe6c77f",
        "name": "initialMain",
        "func": "\n\nmsg.fromApp = msg.payload\nmsg.fromTG = msg.payload\n\n\n\nconst { Configuration, OpenAIApi } = openai;\nconst { PineconeClient } = pineconeBD;\nconst { CreateIndexRequest } = pineconeDBPFetch;\n\n\n\nconst process_env = global.get(\"process_env\")\nconst OPENAI_API_KEY = process_env.OPENAI_API\nconst PINECONE_API_KEY = process_env.PIPECONE_API\nconst PINECONE_ENVIRONMENT = process_env.PIPECONE_ENV\nconst PIPECONE_INDEX = process_env.PIPECONE_INDEX\nnode.warn(OPENAI_API_KEY)\nnode.warn(PINECONE_API_KEY)\nnode.warn(PINECONE_ENVIRONMENT)\nnode.warn(PIPECONE_INDEX)\nglobal.set(\"TABLE_NAME\", PIPECONE_INDEX);\nglobal.set(\"tasks_storage\", []);\nglobal.set(\"results_storage\", []);\nglobal.set(\"taskId\", 0);\n// ============================\n\nconst configuration = new Configuration({\n    apiKey: OPENAI_API_KEY,\n});\nconst openAI = new OpenAIApi(configuration);\n\nconst pinecone = new PineconeClient();\nawait pinecone.init({\n    apiKey: PINECONE_API_KEY,\n    environment: PINECONE_ENVIRONMENT,\n});\n\nconst indexList = await pinecone.listIndexes();\nlet index = pinecone.Index(global.get(\"TABLE_NAME\"));\n\nlet embeddingList = new Map();\nglobal.set(\"embeddingList\", embeddingList);\n\nmsg.main = { indexList, openAI, pinecone, index };\n\n\n\nasync function getADAEmbedding(text) {\n    try {\n        const response = await axios.post(\n            'https://api.openai.com/v1/embeddings',\n            {\n                input: `${text}`,\n                model: \"text-embedding-ada-002\"\n            },\n            {\n                headers: {\n                    'Authorization': `Bearer ${OPENAI_API_KEY}`,\n                    'Content-Type': 'application/json'\n                }\n            }\n        );\n\n        const embeddings = response.data.data[0].embedding;\n        return embeddings;\n    } catch (error) {\n        //node.warn(`Error: ${error}`);\n    }\n}\n\nglobal.set(\"helpers\", {\n    getADAEmbedding\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "openai",
                "module": "openai"
            },
            {
                "var": "pineconeBD",
                "module": "@pinecone-database/pinecone"
            },
            {
                "var": "pineconeDBPFetch",
                "module": "@pinecone-database/pinecone/dist/pinecone-generated-ts-fetch"
            },
            {
                "var": "axios",
                "module": "axios"
            }
        ],
        "x": 260,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "01973285a9ece7ee",
        "type": "function",
        "z": "86999827f4132436",
        "name": "checker",
        "func": "const headers = msg.req.rawHeaders\nconst index = headers.indexOf(\"referer\")\n\nif (headers[index + 1] == 'https://prod62319d24c3c1db1100000008.nr.tadiranforce.co.il/' || headers[index + 1] == 'https://testforce.tadiranforce.co.il/') {\n    return [msg, null]\n} else {\n    msg.statusCode = 401;\n    msg.payload = {\n        \"success\": false,\n        \"error\": \"Forbidden!\"\n    }\n    return [null, msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 120,
        "wires": [
            [],
            [
                "99d0c1877e945cfe"
            ]
        ],
        "icon": "font-awesome/fa-check-square-o"
    },
    {
        "id": "99d0c1877e945cfe",
        "type": "function",
        "z": "86999827f4132436",
        "name": "send error",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    \"success\": false,\n    \"error\": \"Forbidden!\"\n}\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "67b47b9749376e14"
            ]
        ]
    },
    {
        "id": "67b47b9749376e14",
        "type": "http response",
        "z": "86999827f4132436",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "8afec29839d2345a",
        "type": "function",
        "z": "be0e91eaeda9e45d",
        "name": "checker",
        "func": "const headers = msg.req.rawHeaders\nconst index = headers.indexOf(\"referer\")\n\nif (headers[index + 1] == 'https://testforce.tadiranforce.co.il/') {\n    return [msg, null]\n} else {\n    msg.statusCode = 401;\n    msg.payload = {\n        \"success\": false,\n        \"error\": \"Forbidden!\"\n    }\n    return [null, msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 120,
        "wires": [
            [
                "152b98ae70cf8848"
            ],
            [
                "76cde29eeec8e2da",
                "152b98ae70cf8848"
            ]
        ],
        "icon": "font-awesome/fa-check-square-o"
    },
    {
        "id": "76cde29eeec8e2da",
        "type": "function",
        "z": "be0e91eaeda9e45d",
        "name": "send error",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    \"success\": false,\n    \"error\": \"Forbidden!\"\n}\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "ad95c846a2724046"
            ]
        ]
    },
    {
        "id": "ad95c846a2724046",
        "type": "http response",
        "z": "be0e91eaeda9e45d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "152b98ae70cf8848",
        "type": "debug",
        "z": "be0e91eaeda9e45d",
        "name": "FM",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 60,
        "wires": []
    },
    {
        "id": "666747ce63dfca18",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "check command",
        "func": "msg.fromTG1 = msg.payload\nmsg.history = {\n    request: msg.payload.content,\n    startDate: Date.now()\n}\n\nconst process_env = global.get(\"process_env\")\nconst PRIVATE_TG_CHAT = process_env.PRIVATE_TG_CHAT\n\nconst date = msg.originalMessage.date\n\nmsg.typing = `typing${date}`\nglobal.set(`typing${date}`, true)\n\nif (msg.originalMessage.chat.type === \"group\" && (msg.payload.content.includes(\"http://\") || msg.payload.content.includes(\"https://\") && (msg.payload.chatId === PRIVATE_TG_CHAT ))){\n    \n    return msg.payload.content === '/start' ? [msg, null, null] : [null, null, msg];\n\n    }\nelse  if (msg.originalMessage.chat.type === \"group\") {\n    return msg.payload.content === '/start' ? [msg, null, null] : [null, msg, null]\n}\nelse if(msg.originalMessage.chat.type === \"private\"){\n    return msg.payload.content === '/start' ? [msg, null, null] : [null, msg, null]}\n   else {\n\n    return (msg.payload.type === 'message' &&\n        (msg.payload.content.includes(`@${global.get('process_env').BOT_NAME}`) || msg.payload.content === '/start')) ?\n        ((msg.payload.content === '/start') ? [msg, null,null] : [null, msg, null]) :\n        [null, null];\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            [
                "a71a7acbd224bbc2"
            ],
            [
                "06e39c64693b5051",
                "baf7420b5b216cc2"
            ],
            [
                "8e058063d7977bdc",
                "6bcf93306278ae07"
            ]
        ]
    },
    {
        "id": "a71a7acbd224bbc2",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "/start",
        "func": "msg.payload.content = \"Hello\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 260,
        "wires": [
            [
                "991562c24c1dbb8a",
                "0177e3aab7653e72"
            ]
        ]
    },
    {
        "id": "5c39762c2eac8a7e",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "send to user from chat",
        "func": "const responseChatGPT = msg.statusCode < 400 ? msg.payload.choices[0].message.content : `statusCode: ${msg.statusCode} \\npayload: ${typeof msg.payload === 'string' ? msg.payload : msg.payload?.error.message}`\nlet history = global.get(`history${msg.fromTG.chatId}`) || [];\nmsg.history.answer= responseChatGPT\nconst date = msg.originalMessage.date\nmsg.payload = {\n    ...msg.fromTG,\n    content: responseChatGPT,\n    type: \"message\",\n}\n\nglobal.set(`typing${date}`, undefined)\n\n return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 320,
        "wires": [
            [
                "0b18dada9196baa4",
                "222395ae69864297"
            ]
        ]
    },
    {
        "id": "c1577d630be65884",
        "type": "debug",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "to GPT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 380,
        "wires": []
    },
    {
        "id": "1d797e0280d34dfb",
        "type": "debug",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "fromTG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 260,
        "wires": []
    },
    {
        "id": "569bafc9227ab6cd",
        "type": "debug",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "from GPT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 360,
        "wires": []
    },
    {
        "id": "460b8b5ab15ecb0a",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "get",
        "func": "\n\nconst content = msg.fromTG.content.includes(`@${global.get('process_env').BOT_NAME}`) ? msg.fromTG.content.replace(`@${global.get('process_env').BOT_NAME}`, '') : msg.fromTG.content;\n\nconst { getADAEmbedding } = global.get(\"helpers\");\n\nasync function contextAgent(objective, topK) {\n    const queryEmbedding = await getADAEmbedding(objective);\n\n    try {\n        const results = await msg.main.index.query({\n            queryRequest: {\n                vector: queryEmbedding,\n                includeMetadata: true,\n                topK,\n            },\n        });\n\n        node.warn(results )\n        const sortedResults = results.matches?.sort((a, b) => (b?.score ?? 0) - (a?.score ?? 0)) ?? [];\n   \n      return sortedResults.map(v => ({ id: v.id, question: v.metadata.question, answer: v.metadata.result}))\n    } catch (error) {\n        node.warn(error);\n    };\n}\n\nconst contextData = await contextAgent(content, 2);\n\nmsg.payload = contextData\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 320,
        "wires": [
            [
                "f5d2d824f63b0eed",
                "1c79434061d7ff76"
            ]
        ],
        "icon": "node-red/db.svg"
    },
    {
        "id": "06e39c64693b5051",
        "type": "subflow:a36ef6d92fe6c77f",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "",
        "x": 730,
        "y": 320,
        "wires": [
            [
                "460b8b5ab15ecb0a"
            ]
        ]
    },
    {
        "id": "0177e3aab7653e72",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "chek user",
        "func": "msg.url = env.get(\"nodered\") + `/checkUser`;\n\n\nmsg.payload = {\nchat_id: msg.originalMessage.from.id\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 220,
        "wires": [
            [
                "1b678c07805e900a"
            ]
        ]
    },
    {
        "id": "1b678c07805e900a",
        "type": "http request",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 220,
        "wires": [
            [
                "59f43ba9fea18da2"
            ]
        ]
    },
    {
        "id": "59f43ba9fea18da2",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "save/update",
        "func": "if(msg.payload.length > 0){\n   return[null,msg]\n}\n\nelse{\n    msg.method=\"POST\"\n    msg.url = env.get(\"nodered\") +`/saveUser`;\n    msg.payload = {\n        first_name: msg.originalMessage.from.first_name ? msg.originalMessage.from.first_name :'',\n        last_name: msg.originalMessage.from.last_name ? msg.originalMessage.from.last_name : '',\n        username: msg.originalMessage.from.username,\n        chat_id: msg.originalMessage.from.id,\n        language_code: msg.originalMessage.from.language_code\n    }\n    \nreturn[msg,null]\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 220,
        "wires": [
            [
                "483948c77608cd63"
            ],
            []
        ]
    },
    {
        "id": "483948c77608cd63",
        "type": "http request",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1290,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "c9fb5769ca6ccbec",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "save history ",
        "func": "msg.history.endDate = Date.now()\nmsg.history.chat_id = msg.originalMessage.from.id\nmsg.history.user_name = msg.originalMessage.from.username\nmsg.payload = msg.history\nmsg.url = env.get(\"nodered\") + `/saveUserMessage`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 300,
        "wires": [
            [
                "09abf79dd626bde6",
                "47c066e4018176fa"
            ]
        ]
    },
    {
        "id": "09abf79dd626bde6",
        "type": "http request",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1980,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "47c066e4018176fa",
        "type": "debug",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "debug 403",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 360,
        "wires": []
    },
    {
        "id": "222395ae69864297",
        "type": "debug",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "debug 404",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 380,
        "wires": []
    },
    {
        "id": "f5d2d824f63b0eed",
        "type": "debug",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "from P",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 400,
        "wires": []
    },
    {
        "id": "307bddd08bdbff3a",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "name": "get",
        "func": "const { getADAEmbedding } = global.get(\"helpers\");\n\nasync function contextAgent(objective, topK) {\n    const queryEmbedding = await getADAEmbedding(objective);\n\n    try {\n        const results = await msg.main.index.query({\n            queryRequest: {\n                vector: queryEmbedding,\n                includeMetadata: true,\n                topK,\n            },\n        });\n\n\n        const sortedResults = results.matches?.sort((a, b) => (b?.score ?? 0) - (a?.score ?? 0)) ?? [];\n       return sortedResults\n     //return sortedResults.map(v => ({ id: v.id, question: v.metadata.question, answer: v.metadata.result}))\n    } catch (error) {\n        node.warn(error);\n    };\n}\n\nconst contextData = await contextAgent('pipecone', 100);\n\nmsg.payload = contextData\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "9252f534679bb795",
                "b493d5d518a52f1e"
            ]
        ]
    },
    {
        "id": "442ec6b0a144ef21",
        "type": "http in",
        "z": "c8208e6a65d3c2af",
        "name": "",
        "url": "/getVectors1",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "5912450dd125e1aa"
            ]
        ]
    },
    {
        "id": "9252f534679bb795",
        "type": "http response",
        "z": "c8208e6a65d3c2af",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 590,
        "y": 100,
        "wires": []
    },
    {
        "id": "5912450dd125e1aa",
        "type": "subflow:a36ef6d92fe6c77f",
        "z": "c8208e6a65d3c2af",
        "name": "",
        "x": 330,
        "y": 100,
        "wires": [
            [
                "307bddd08bdbff3a"
            ]
        ]
    },
    {
        "id": "3ad7afb17e838c8e",
        "type": "inject",
        "z": "c8208e6a65d3c2af",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 60,
        "wires": [
            [
                "5912450dd125e1aa"
            ]
        ]
    },
    {
        "id": "fedf0aa9a67cbf02",
        "type": "inject",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 800,
        "y": 360,
        "wires": [
            [
                "460b8b5ab15ecb0a"
            ]
        ]
    },
    {
        "id": "d1fe775ad04641c1",
        "type": "http request",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "Get Link Info",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 620,
        "wires": [
            [
                "70d89be8294e4cc1",
                "e288b3035af24eaa"
            ]
        ]
    },
    {
        "id": "6bcf93306278ae07",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "",
        "func": "let regex = /(http[s]?:\\/\\/[^\\s]+)/g;\n\nmsg.collection = \"knowlegebase\"\n\nvar result = msg.payload.content.match(regex);\nmsg.payload.link = result[0];\n\nmsg.current_link = result[0];\nmsg.url = result[0];\n\nif(msg._id){\n    msg._id = objectid(msg._id)\n    node.warn(\"1\")\n    return [msg,null]\n    \n}else{\n    msg._id = objectid();\n    msg.payload = {\n        _id: msg._id,\n        name: msg.payload.name,\n        file: msg.payload.file,\n        url: msg.payload.link,\n        vectors: [],\n        status: \"pending\",\n        deleted: false,\n        createdAt: new Date()\n    };\n    node.warn(\"2\")\n    return [null,msg]\n}\n\n\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 250,
        "y": 640,
        "wires": [
            [
                "d1fe775ad04641c1",
                "28c49149129d34ef"
            ],
            [
                "d1fe775ad04641c1",
                "78726ae519ab086a",
                "0b1926129388787b"
            ]
        ]
    },
    {
        "id": "079317a7798ae7d0",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "Create Pages",
        "func": "msg.filename = \"/data/\" + msg.current_link.split(\"://\")[1].replace(/\\//g, '_') + \".txt\";\nlet str = msg.payload.text;\nmsg.ll = msg.payload.text.length;\n\nfunction test2(str, index) {\n    const result = [];\n\n    while (index < str.length) {\n        let endIndex = index + 500 <= str.length ? index + 500 : str.length;\n        let sub = str.slice(index, endIndex);\n        let last = sub.lastIndexOf(\".\");\n\n        if (last !== -1) {\n            result.push({\n                \"text\": str.slice(index, index + last + 1)\n            });\n            index += last + 1;\n        } else {\n            result.push({\n                \"text\": str.slice(index, endIndex)\n            });\n            index = endIndex;\n        }\n    }\n\n    return result;\n}\n\nmsg.pages = test2(str, 0);\nnode.warn(msg.pages)\nmsg.array = msg.pages;\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 620,
        "wires": [
            [
                "c79f68ae78c2fa0a"
            ]
        ]
    },
    {
        "id": "70d89be8294e4cc1",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "Scrape",
        "func": "\nconst { extractor } = unfluff;\n\nmsg.payload = unfluff(msg.payload);\nmsg.payload.originalSourceUrl = msg.responseUrl;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "unfluff",
                "module": "unfluff"
            }
        ],
        "x": 650,
        "y": 620,
        "wires": [
            [
                "079317a7798ae7d0"
            ]
        ]
    },
    {
        "id": "e288b3035af24eaa",
        "type": "debug",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "debug 410",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 580,
        "wires": []
    },
    {
        "id": "ef767d928767cb70",
        "type": "debug",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "ToPinecone",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 740,
        "wires": []
    },
    {
        "id": "9406da99327c9644",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "post",
        "func": "const { getADAEmbedding } = global.get(\"helpers\");\nmsg.collection = \"knowlegebase\"\n\nconst question = msg.fromApp.question\nconst result = msg.fromApp.result\nnode.warn(msg.fromApp)\nconst embeddingResult = await getADAEmbedding(result);\n\nawait msg.main.index.upsert({\n    upsertRequest: {\n        vectors: [\n            {\n                id: Date.now().toString(),\n                values: embeddingResult,\n                metadata: { question: question, result },\n            },\n        ],\n    },\n});\nmsg.query = { \"_id\": msg._id }\nmsg.payload = {\n\n    \"$push\": {\n        \"vectors\": {\n            id: Date.now().toString(),\n            metadata: { question: question, result },\n        }\n    }\n\n};\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 820,
        "wires": [
            [
                "c79f68ae78c2fa0a",
                "9fc1615f16cc61ed"
            ]
        ]
    },
    {
        "id": "ca9798d997d772fd",
        "type": "subflow:a36ef6d92fe6c77f",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "",
        "x": 1180,
        "y": 820,
        "wires": [
            [
                "ef767d928767cb70",
                "9406da99327c9644"
            ]
        ]
    },
    {
        "id": "d10542b05ef1f56d",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "create vector",
        "func": "delete msg.filepath;\ndelete msg.filename;\n\n\nmsg.payload = {\n   question: msg.payload.choices[0].message.content,\n   result: msg.text\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 820,
        "wires": [
            [
                "2037f13cdb05275d",
                "ca9798d997d772fd"
            ]
        ]
    },
    {
        "id": "d9ec1bb17c6cb2e5",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "the end",
        "func": "const date = msg.originalMessage.date\n// delete msg.payload\nglobal.set(`typing${date}`, undefined)\nmsg.payload = {\n    chatId: msg.fromTG1.chatId,\n    messageId: msg.fromTG1.messageId,\n    content: \"upload finish\",\n    type: \"message\",\n    date: msg.fromTG1.date\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 620,
        "wires": [
            [
                "42c541d584f35255"
            ]
        ]
    },
    {
        "id": "681ed7fd92333081",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "update knowlegebase",
        "func": "msg.collection = \"knowlegebase\"\n\nmsg.query = { \"_id\": msg._id }\nmsg.payload = {\n \n        $set: {\n            status: \"done\"\n        }\n    };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 580,
        "wires": [
            [
                "8fe93679b9f619bc"
            ]
        ]
    },
    {
        "id": "db7c93f50d03cd4e",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "typing",
        "func": "msg.payload = {\n    chatId: msg.payload.chatId,\n    type: 'action',\n    content: \"typing\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 400,
        "wires": [
            [
                "588935d38b66c7b2"
            ]
        ]
    },
    {
        "id": "44b3fdac09e09d2a",
        "type": "delay",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 665,
        "y": 400,
        "wires": [
            [
                "baf7420b5b216cc2"
            ]
        ],
        "l": false
    },
    {
        "id": "7c1bf4b5923a9948",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "typing",
        "func": "msg.payload = {\n    chatId: msg.payload.chatId,\n    type: 'action',\n    content: \"upload_document\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 540,
        "wires": [
            [
                "6fae5298f072ae66"
            ]
        ]
    },
    {
        "id": "1043346252c517a7",
        "type": "delay",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 495,
        "y": 540,
        "wires": [
            [
                "8e058063d7977bdc"
            ]
        ],
        "l": false
    },
    {
        "id": "17c46e8b98657bce",
        "type": "debug",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "debug 411",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 620,
        "wires": []
    },
    {
        "id": "2037f13cdb05275d",
        "type": "debug",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "create VEC",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 760,
        "wires": []
    },
    {
        "id": "78726ae519ab086a",
        "type": "debug",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 720,
        "wires": []
    },
    {
        "id": "28c49149129d34ef",
        "type": "debug",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 600,
        "wires": []
    },
    {
        "id": "82e139d665440e8d",
        "type": "telegram receiver",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "",
        "bot": "4b07803a52e468f5",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 140,
        "y": 300,
        "wires": [
            [
                "1d797e0280d34dfb",
                "666747ce63dfca18"
            ],
            []
        ]
    },
    {
        "id": "991562c24c1dbb8a",
        "type": "telegram sender",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "",
        "bot": "4b07803a52e468f5",
        "haserroroutput": false,
        "outputs": 1,
        "x": 800,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "0b18dada9196baa4",
        "type": "telegram sender",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "",
        "bot": "4b07803a52e468f5",
        "haserroroutput": true,
        "outputs": 2,
        "x": 1600,
        "y": 320,
        "wires": [
            [
                "c9fb5769ca6ccbec",
                "47c066e4018176fa"
            ],
            [
                "47c066e4018176fa"
            ]
        ]
    },
    {
        "id": "588935d38b66c7b2",
        "type": "telegram sender",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "",
        "bot": "4b07803a52e468f5",
        "haserroroutput": false,
        "outputs": 1,
        "x": 605,
        "y": 400,
        "wires": [
            [
                "44b3fdac09e09d2a"
            ]
        ],
        "l": false
    },
    {
        "id": "6fae5298f072ae66",
        "type": "telegram sender",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "",
        "bot": "4b07803a52e468f5",
        "haserroroutput": false,
        "outputs": 1,
        "x": 425,
        "y": 540,
        "wires": [
            [
                "1043346252c517a7"
            ]
        ],
        "l": false
    },
    {
        "id": "42c541d584f35255",
        "type": "telegram sender",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "",
        "bot": "4b07803a52e468f5",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1430,
        "y": 620,
        "wires": [
            [
                "17c46e8b98657bce"
            ]
        ]
    },
    {
        "id": "baf7420b5b216cc2",
        "type": "while-loop",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "",
        "condi": "global.get(`${msg.typing}`) === true",
        "limit": true,
        "limitTime": "100",
        "time": "counter",
        "timeType": "msg",
        "x": 605,
        "y": 340,
        "wires": [
            [],
            [
                "db7c93f50d03cd4e"
            ]
        ],
        "l": false
    },
    {
        "id": "8e058063d7977bdc",
        "type": "while-loop",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "",
        "condi": "global.get(`${msg.typing}`) === true",
        "limit": true,
        "limitTime": "100",
        "time": "counter",
        "timeType": "msg",
        "x": 385,
        "y": 480,
        "wires": [
            [],
            [
                "7c1bf4b5923a9948"
            ]
        ],
        "l": false
    },
    {
        "id": "c79f68ae78c2fa0a",
        "type": "array-loop",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "",
        "key": "count",
        "keyType": "msg",
        "reset": false,
        "resetValue": "value-null",
        "array": "array",
        "arrayType": "msg",
        "x": 1050,
        "y": 620,
        "wires": [
            [
                "681ed7fd92333081",
                "d9ec1bb17c6cb2e5"
            ],
            [
                "03eaa5c76a7cc0b0"
            ]
        ]
    },
    {
        "id": "b5149a289a574835",
        "type": "openai-ubos",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "genarate unswer",
        "model": "gpt-3.5-turbo",
        "temperature": 0.02,
        "max_tokens": 2000,
        "prompt": "",
        "frequency_penalty": 0,
        "presence_penalty": 0,
        "top_p": 1,
        "stop": {
            "type": "json",
            "value": "[]"
        },
        "OPENAI_API_KEY": "",
        "x": 790,
        "y": 820,
        "wires": [
            [
                "d10542b05ef1f56d"
            ]
        ]
    },
    {
        "id": "03eaa5c76a7cc0b0",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "create vector",
        "func": "delete msg.filepath;\ndelete msg.filename;\ndelete msg.text;\nconst process_env = global.get(\"process_env\")\nmsg.OPENAI_API_KEY = process_env.OPENAI_API\n\nmsg.text = msg.payload.text\n  msg.messages= [\n    { \"role\": \"system\", \"content\": `create me the questionfor this text : ${msg.payload.text}`},\n     \n    ]\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 820,
        "wires": [
            [
                "b5149a289a574835",
                "2037f13cdb05275d"
            ]
        ]
    },
    {
        "id": "62ddf71e3259e377",
        "type": "openai-ubos",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "genarate unswer",
        "model": "gpt-3.5-turbo",
        "temperature": 0.02,
        "max_tokens": 2000,
        "prompt": "",
        "frequency_penalty": 0,
        "presence_penalty": 0,
        "top_p": 1,
        "stop": {
            "type": "json",
            "value": "[]"
        },
        "OPENAI_API_KEY": "",
        "x": 1125,
        "y": 320,
        "wires": [
            [
                "5c39762c2eac8a7e",
                "569bafc9227ab6cd"
            ]
        ],
        "l": false
    },
    {
        "id": "1c79434061d7ff76",
        "type": "function",
        "z": "c8208e6a65d3c2af",
        "g": "0cf1026d3ccdfd21",
        "name": "create vector",
        "func": "delete msg.filepath;\ndelete msg.filename;\ndelete msg.text;\nconst process_env = global.get(\"process_env\")\nmsg.OPENAI_API_KEY = process_env.OPENAI_API\n\n\n\nconst content = msg.fromTG.content.includes(`@${global.get('process_env').BOT_NAME}`) ? msg.fromTG.content.replace(`@${global.get('process_env').BOT_NAME}`, '') : msg.fromTG.content;\n\n\n  msg.messages =  [\n    { \"role\": \"system\", \"content\": `You are a smart and cute support bot.paraphrase this info: ${msg.payload[0].answer}` },\n    { \"role\": \"user\", \"content\": content }\n  ]\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 320,
        "wires": [
            [
                "62ddf71e3259e377",
                "c1577d630be65884"
            ]
        ]
    },
    {
        "id": "603d55409e1a73c9",
        "type": "inject",
        "z": "c8208e6a65d3c2af",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2620,
        "wires": [
            [
                "6b175c5c18273161"
            ]
        ]
    },
    {
        "id": "6b175c5c18273161",
        "type": "file in",
        "z": "c8208e6a65d3c2af",
        "name": "",
        "filename": "/data/storage/text (9).docx",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 2620,
        "wires": [
            [
                "902324c817667cda"
            ]
        ]
    },
    {
        "id": "902324c817667cda",
        "type": "debug",
        "z": "c8208e6a65d3c2af",
        "name": "debug 419",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 2620,
        "wires": []
    },
    {
        "id": "b493d5d518a52f1e",
        "type": "debug",
        "z": "c8208e6a65d3c2af",
        "name": "fromTG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 40,
        "wires": []
    },
    {
        "id": "0b1926129388787b",
        "type": "link call",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "",
        "links": [
            "8771d95b528d34d0"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 490,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "9fc1615f16cc61ed",
        "type": "link call",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1490,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "8fe93679b9f619bc",
        "type": "link call",
        "z": "c8208e6a65d3c2af",
        "g": "93961f4aeda1b32c",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1520,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "2677414dc3b763e4",
        "type": "link in",
        "z": "33ad232901cfdd1c",
        "name": "mongo Find",
        "links": [],
        "x": 65,
        "y": 60,
        "wires": [
            [
                "249710f1ad698a20"
            ]
        ]
    },
    {
        "id": "56c2fced239f2936",
        "type": "link in",
        "z": "33ad232901cfdd1c",
        "name": "mongo Aggregate",
        "links": [],
        "x": 65,
        "y": 120,
        "wires": [
            [
                "fb78182cc4835041"
            ]
        ]
    },
    {
        "id": "8771d95b528d34d0",
        "type": "link in",
        "z": "33ad232901cfdd1c",
        "name": "mongo Insert",
        "links": [],
        "x": 65,
        "y": 220,
        "wires": [
            [
                "703258bd8f8bf4d7",
                "f3044d88f842fe9e"
            ]
        ]
    },
    {
        "id": "d1949ed8cdf3c5ed",
        "type": "link in",
        "z": "33ad232901cfdd1c",
        "name": "mongo Update",
        "links": [],
        "x": 65,
        "y": 280,
        "wires": [
            [
                "86de144f4f3b1450",
                "4e41ef5ff791e8ec"
            ]
        ]
    },
    {
        "id": "cc5e7181a25ef63d",
        "type": "link out",
        "z": "33ad232901cfdd1c",
        "name": "link out 1",
        "mode": "return",
        "links": [],
        "x": 325,
        "y": 60,
        "wires": []
    },
    {
        "id": "466a89b9ea3e18b6",
        "type": "link out",
        "z": "33ad232901cfdd1c",
        "name": "link out 2",
        "mode": "return",
        "links": [],
        "x": 335,
        "y": 120,
        "wires": []
    },
    {
        "id": "703258bd8f8bf4d7",
        "type": "link out",
        "z": "33ad232901cfdd1c",
        "name": "link out 4",
        "mode": "return",
        "links": [],
        "x": 215,
        "y": 180,
        "wires": []
    },
    {
        "id": "86de144f4f3b1450",
        "type": "link out",
        "z": "33ad232901cfdd1c",
        "name": "link out 5",
        "mode": "return",
        "links": [],
        "x": 215,
        "y": 320,
        "wires": []
    },
    {
        "id": "f3044d88f842fe9e",
        "type": "mongodb out",
        "z": "33ad232901cfdd1c",
        "mongodb": "",
        "name": "db",
        "collection": "",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "insert",
        "x": 240,
        "y": 220,
        "wires": []
    },
    {
        "id": "4e41ef5ff791e8ec",
        "type": "mongodb out",
        "z": "33ad232901cfdd1c",
        "mongodb": "",
        "name": "db",
        "collection": "",
        "payonly": false,
        "upsert": false,
        "multi": false,
        "operation": "update",
        "x": 240,
        "y": 280,
        "wires": []
    },
    {
        "id": "249710f1ad698a20",
        "type": "mongodb in",
        "z": "33ad232901cfdd1c",
        "mongodb": "",
        "name": "db",
        "collection": "",
        "operation": "find",
        "x": 200,
        "y": 60,
        "wires": [
            [
                "cc5e7181a25ef63d"
            ]
        ]
    },
    {
        "id": "fb78182cc4835041",
        "type": "mongodb in",
        "z": "33ad232901cfdd1c",
        "mongodb": "",
        "name": "db",
        "collection": "",
        "operation": "aggregate",
        "x": 210,
        "y": 120,
        "wires": [
            [
                "466a89b9ea3e18b6"
            ]
        ]
    },
    {
        "id": "b1cbc1d37577fdbd",
        "type": "http in",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "url": "/chekUserExist",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "06c7c7103269ba13"
            ]
        ]
    },
    {
        "id": "b7f9b16fd9b17654",
        "type": "http response",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 60,
        "wires": []
    },
    {
        "id": "33d8f81e06fa10e4",
        "type": "http in",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "url": "/updateUserChatData",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "5f374d352c58e52d"
            ]
        ]
    },
    {
        "id": "6766302ec1d2eb2d",
        "type": "http in",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "url": "/saveUserChatData",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 180,
        "wires": [
            [
                "0c407bc4ae621990"
            ]
        ]
    },
    {
        "id": "5f374d352c58e52d",
        "type": "function",
        "z": "4004e7d2fbdbf6a9",
        "name": "update users_chat",
        "func": "msg.query = {\n    _id:objectid(msg.payload._id)\n}\nlet obj = msg.payload\nmsg.collection = 'users_chat'\n\ndelete obj._id;\nmsg.payload = obj\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 390,
        "y": 120,
        "wires": [
            [
                "0abbbe697992f29b"
            ]
        ]
    },
    {
        "id": "0c407bc4ae621990",
        "type": "function",
        "z": "4004e7d2fbdbf6a9",
        "name": "save users_chat",
        "func": "msg.collection = 'users_chat'\n\nmsg.payload.deleted = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 180,
        "wires": [
            [
                "d522fbbfff81ae43"
            ]
        ]
    },
    {
        "id": "06c7c7103269ba13",
        "type": "function",
        "z": "4004e7d2fbdbf6a9",
        "name": "find users_chat",
        "func": "msg.payload = {\n    chat_id: Number(msg.payload.chat_id) \n}\n\nmsg.collection = 'users_chat'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 60,
        "wires": [
            [
                "3ba0fdedd6f6201e"
            ]
        ]
    },
    {
        "id": "b2e1f244c6bd955d",
        "type": "http response",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 180,
        "wires": []
    },
    {
        "id": "a1ebaee935089a3b",
        "type": "http response",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 120,
        "wires": []
    },
    {
        "id": "f24d44f7262b52cd",
        "type": "http in",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "url": "/getAllUsers",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "31a716a792e6a4c0"
            ]
        ]
    },
    {
        "id": "7477d82efd1305b2",
        "type": "http response",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 300,
        "wires": []
    },
    {
        "id": "fd6379cb31404638",
        "type": "http in",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "url": "/saveUserMessage",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "108f67f6c7289131"
            ]
        ]
    },
    {
        "id": "108f67f6c7289131",
        "type": "function",
        "z": "4004e7d2fbdbf6a9",
        "name": "save users_messages",
        "func": "msg.collection = 'users_messages'\n\nmsg.payload.deleted = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 240,
        "wires": [
            [
                "6d4cba3aa8be1c26"
            ]
        ]
    },
    {
        "id": "27289d926d3a2b25",
        "type": "http response",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 240,
        "wires": []
    },
    {
        "id": "87dbe29697f2e5c1",
        "type": "http in",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "url": "/getChatHIstory",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 540,
        "wires": [
            [
                "6e5657b56e44ccaf"
            ]
        ]
    },
    {
        "id": "6e5657b56e44ccaf",
        "type": "function",
        "z": "4004e7d2fbdbf6a9",
        "name": "get users_messages",
        "func": "msg.payload = {\n    chat_id: Number(msg.payload.id)\n}\nmsg.collection = 'users_messages'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 540,
        "wires": [
            [
                "16223ecf470a223f"
            ]
        ]
    },
    {
        "id": "eefe631abc8cde08",
        "type": "http response",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 540,
        "wires": []
    },
    {
        "id": "9de68b716677dfcd",
        "type": "http in",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "url": "/saveUser",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "946838aa6a2c923d"
            ]
        ]
    },
    {
        "id": "946838aa6a2c923d",
        "type": "function",
        "z": "4004e7d2fbdbf6a9",
        "name": "save users",
        "func": "msg.payload.deleted = false\nmsg.collection = 'users'\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 420,
        "wires": [
            [
                "f5a82bc844496abf"
            ]
        ]
    },
    {
        "id": "44bd463107561a17",
        "type": "http response",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 420,
        "wires": []
    },
    {
        "id": "5c6a28d3c955de54",
        "type": "http in",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "url": "/checkUser",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 480,
        "wires": [
            [
                "1c17a713153514dd"
            ]
        ]
    },
    {
        "id": "1c17a713153514dd",
        "type": "function",
        "z": "4004e7d2fbdbf6a9",
        "name": "find users",
        "func": "msg.payload={\n    chat_id: Number(msg.payload.chat_id) \n}\nmsg.collection = 'users'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 480,
        "wires": [
            [
                "2ca3887f8000c42e"
            ]
        ]
    },
    {
        "id": "c251e84a8957ce9d",
        "type": "http response",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 480,
        "wires": []
    },
    {
        "id": "bd0a57e25a0432e1",
        "type": "http in",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "url": "/getUsersTelegram",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 360,
        "wires": [
            [
                "c5818e7815a34e57"
            ]
        ]
    },
    {
        "id": "93858da710ccfe98",
        "type": "http response",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 360,
        "wires": []
    },
    {
        "id": "3ba0fdedd6f6201e",
        "type": "link call",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 570,
        "y": 60,
        "wires": [
            [
                "b7f9b16fd9b17654"
            ]
        ]
    },
    {
        "id": "0abbbe697992f29b",
        "type": "link call",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 620,
        "y": 120,
        "wires": [
            [
                "a1ebaee935089a3b"
            ]
        ]
    },
    {
        "id": "6d4cba3aa8be1c26",
        "type": "link call",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "links": [
            "8771d95b528d34d0"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 650,
        "y": 240,
        "wires": [
            [
                "27289d926d3a2b25"
            ]
        ]
    },
    {
        "id": "d522fbbfff81ae43",
        "type": "link call",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "links": [
            "8771d95b528d34d0"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 610,
        "y": 180,
        "wires": [
            [
                "b2e1f244c6bd955d"
            ]
        ]
    },
    {
        "id": "f5a82bc844496abf",
        "type": "link call",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "links": [
            "8771d95b528d34d0"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 530,
        "y": 420,
        "wires": [
            [
                "44bd463107561a17"
            ]
        ]
    },
    {
        "id": "2ca3887f8000c42e",
        "type": "link call",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 530,
        "y": 480,
        "wires": [
            [
                "c251e84a8957ce9d"
            ]
        ]
    },
    {
        "id": "16223ecf470a223f",
        "type": "link call",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 570,
        "y": 540,
        "wires": [
            [
                "eefe631abc8cde08",
                "844b66189eb1c08e"
            ]
        ]
    },
    {
        "id": "844b66189eb1c08e",
        "type": "debug",
        "z": "4004e7d2fbdbf6a9",
        "name": "debug 405",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 600,
        "wires": []
    },
    {
        "id": "c13653a3c3d46321",
        "type": "template",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": ".header{\ntop: 0px !important;\n/* left: 182px !important; */\npadding: 0px !important;\n/* width: 100% !important; */\nborder-bottom: 2px solid rgb(241, 243, 244) !important;\n}\n\n.menu_section{\nbox-shadow: rgba(0, 0, 0, 0.25) 1px 2px 3px !important;\nheight: 100vh !important;\npadding: 0px !important;\nleft: 0px !important;\ntop: 0px !important;\nborder-right: 2px solid rgb(241, 243, 244) !important;\n}\n\n.main_section{\npadding: 0px !important;\n/* left: 182px !important; */\ntop: 70px !important; \n}\n\n.image{\n    padding: 4px 14px !important;\n    left: 0px !important;\n    width: 100% !important;\n    border-bottom: 2px solid rgb(241, 243, 244) !important;\n    height: 75px !important;\n}\n\n\n.menu .active span{\ncolor: #2a2f36 !important;\n}\n\n.menu .active {\n    background: #ebf1fb !important;\n}\n\n.menu button:hover{\nbackground: #ebf1fb;\n}\n\n.menu button{\n    box-shadow: none !important;\n}\n\n.menu span{\n    font-size: 16px !important;\n    font-weight: 400 !important;\n    color: #00000099 !important;\n}\n\n.menu {\n    left: 0px !important;\n    width: 100% !important;\n    padding: 0 !important;\n}\n\n.menu_wrap{\n    position: fixed !important;\n    left: 0px!important;\n    top: 0px !important;\n    height: 100vh !important;\n    /* width: 178.312px!important; */\n    padding: 0px!important;\n    box-shadow: rgba(0, 0, 0, 0.25) 1px 2px 3px !important;\n}\n\n.menu button {\n    justify-content: start !important;\n    padding: 5px 10px 5px 15px !important;\n    margin-bottom: 5px !important;\n}\n\n.setting_title{\n    padding: 4px 14px !important;\n    left: 0px !important;\n    width: 100% !important;\n    border-bottom: 2px solid rgb(241, 243, 244) !important;\n}\n\n.setting_title .bp3-ui-text {\n    font-weight: 600 !important;\n    font-size: 18px !important;\n}\n\n.telegramList {\n    padding: 10px 20px !important;\n}\n\n.telegramList .custom-wrapper-canvas-list{\n    display: flex;\n    flex-direction: column !important;\n}\n.telegramList .custom-wrapper-canvas-list button {\n    display: none !important;\n}\n.telegramList .custom-wrapper-canvas-list .t--widget-containerwidget{\n    width: 90% !important;\n    position: static !important;\n    border-radius: 8px!important;\n    padding: 0 !important;\n    margin-bottom: 7px;\n    margin-right: auto !important;\n    margin-left: 0 !important;\n    background-color: #cfcfdb !important;\n}\n.telegramList .custom-wrapper-canvas-list .t--widget-containerwidget:nth-of-type(odd){\n    margin-right: 0 !important;\n    margin-left: auto !important;\n    background-color: #e5e5e6 !important;\n}\n.telegramList .t--widget-textwidget{\n    width: auto !important;\n    position: static !important;\n    padding: 5px 15px !important;\n    height: 100% !important;\n}\n.telegramList .t--widget-textwidget span{\n    font-weight: 500; \n    font-size: 16px;\n    line-height: 125%;\n}\n\n.telegramList .custom-wrapper-canvas-list .t--widget-containerwidget:nth-of-type(odd) .t--widget-textwidget span{\n    text-align: end;\n}\n\n.telegramWrap{\n    padding: 0!important;\n}\n\n.container{\n    min-height: 100vh;\n}\n\n.selectedTab{\n    box-shadow: rgb(235, 239, 242) -1px 0px 0px inset, rgb(235, 239, 242) 0px 0px 0px inset, rgb(55 169 235) 0px 4px 0px inset !important;\n}",
        "output": "str",
        "x": 260,
        "y": 620,
        "wires": [
            [
                "6c14c16dc9e0d8f4"
            ]
        ]
    },
    {
        "id": "6c14c16dc9e0d8f4",
        "type": "http response",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "text/css"
        },
        "x": 410,
        "y": 620,
        "wires": []
    },
    {
        "id": "cbdef52a04ca4507",
        "type": "http in",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "url": "/css",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 620,
        "wires": [
            [
                "c13653a3c3d46321"
            ]
        ]
    },
    {
        "id": "31a716a792e6a4c0",
        "type": "function",
        "z": "4004e7d2fbdbf6a9",
        "name": "get users_chat",
        "func": "msg.collection = 'users_chat'\nmsg.payload={}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            [
                "76404382f2b1732b"
            ]
        ]
    },
    {
        "id": "c5818e7815a34e57",
        "type": "function",
        "z": "4004e7d2fbdbf6a9",
        "name": "get users",
        "func": "msg.collection = 'users'\nmsg.payload = {}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 360,
        "wires": [
            [
                "7dce76ede6c5ac60"
            ]
        ]
    },
    {
        "id": "76404382f2b1732b",
        "type": "link call",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 550,
        "y": 300,
        "wires": [
            [
                "7477d82efd1305b2"
            ]
        ]
    },
    {
        "id": "7dce76ede6c5ac60",
        "type": "link call",
        "z": "4004e7d2fbdbf6a9",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 530,
        "y": 360,
        "wires": [
            [
                "93858da710ccfe98"
            ]
        ]
    },
    {
        "id": "f97b0c9a1ee37a8c",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 470,
        "y": 180,
        "wires": []
    },
    {
        "id": "99624067aae5195b",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "name": "err login",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 220,
        "wires": []
    },
    {
        "id": "9bb0630c766c1fae",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 450,
        "y": 520,
        "wires": []
    },
    {
        "id": "1b8da8f5dff0448a",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "name": "err register",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 560,
        "wires": []
    },
    {
        "id": "cda158a3d19d64d9",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1370,
        "y": 1520,
        "wires": []
    },
    {
        "id": "7a70680f44f5df9c",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "name": "err register",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1560,
        "wires": []
    },
    {
        "id": "aa679389020af958",
        "type": "function",
        "z": "f4036141cc030bcf",
        "name": "menu grouping",
        "func": "msg.payload = msg.payload[0];\nmsg.permissions = msg.payload.permissions;\n\nfunction sortByPositionNumber(arr) {\n    return arr.sort((a, b) => +a.position - +b.position);\n}\n\nmsg.menu = sortByPositionNumber(msg.payload.menu).map(el => {\n\n    if (el.isParent) {\n        return {\n            \"label\": el.name,\n            \"value\": el.name,\n            \"icon\": el.icon ? el.icon : \"\",\n            \"children\": el.childModules.length \n                ? sortByPositionNumber(el.childModules)\n                  .map(item => ({\n                      \"label\": item.name,\n                      \"value\": item.name,\n                      \"icon\": item.icon ? item.icon : \"\"\n                  })) \n                : []\n        }\n    } else {\n        return {\n            \"label\": el.name,\n            \"value\": el.name,\n            \"children\": [],\n            \"icon\": el.icon ? el.icon : \"\",\n        }\n    }\n    \n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 840,
        "wires": [
            [
                "3c6be83529dc0fcd",
                "80886c4b206ae578"
            ]
        ]
    },
    {
        "id": "3c6be83529dc0fcd",
        "type": "function",
        "z": "f4036141cc030bcf",
        "name": "check user permissions",
        "func": "const pageName = msg.check.page_id.replace('%20', ' ');\n\nconst parentPage = msg.menu.map((el) => el.label).includes(pageName);\nconst childPage = msg.menu.filter((e) => e.children.length > 0).flatMap((el) => el.children).map((elem) => elem.label).includes(pageName);\n\nif (parentPage || childPage || pageName == \"Chat\" || pageName == \"Vectors\" || pageName == \"Content\" || pageName === \"BaseDetails\") {\n\n    msg.statusCode = 200;\n    msg.payload = {\n        auth: \"Success\",\n        code: 200,\n        user: {\n            \"menu\": msg.menu,\n            \"permission\": msg.permissions,\n            \"translation\": msg.payload.translation[0],\n            \"info\": msg.user\n        }\n    }\n\n} else {\n\n    msg.payload = {\n        auth: \"Unautorizate\",\n        code: 401,\n        login_id: msg.menu[0].value + `?pageName=${msg.menu[0].value}`,\n        app_id: msg.check.app_id\n    }\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 840,
        "wires": [
            [
                "2a1cf553e1e9ec78",
                "caff712e2eb791e2"
            ]
        ]
    },
    {
        "id": "80886c4b206ae578",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "name": "menu grouping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 800,
        "wires": []
    },
    {
        "id": "14b59f3691ef69ba",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "func": "msg.collection = \"admin_roles\";\n\nmsg.payload={\n    name:msg.payload.name,\n    deleted:false,\n    permissions: [],\n    createdAt: new Date((new Date().toISOString()))\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1440,
        "wires": [
            [
                "399a4d9543fe95a1",
                "5e4d4597f4c69b03"
            ]
        ]
    },
    {
        "id": "84a0df2970ba557a",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "createRole",
        "url": "/createRole",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1440,
        "wires": [
            [
                "14b59f3691ef69ba"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "399a4d9543fe95a1",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 410,
        "y": 1460,
        "wires": []
    },
    {
        "id": "8b8038ef3ffa67dc",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "getRoles",
        "url": "/getRoles",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1220,
        "wires": [
            [
                "669f5378dc89b756"
            ]
        ]
    },
    {
        "id": "a2903e704c5feffd",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 590,
        "y": 1220,
        "wires": []
    },
    {
        "id": "cf996b8f5729052e",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "addModuleToRole",
        "url": "/addModuleToRole",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1580,
        "wires": [
            [
                "98ea56df1bdf7663",
                "a79b5a026be5770c"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "bb8c3b11be10027d",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 470,
        "y": 1600,
        "wires": []
    },
    {
        "id": "98ea56df1bdf7663",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "func": "msg.collection = \"admin_roles\";\n\nlet crud = {\n    \"canCreate\": false,\n    \"canRead\": false,\n    \"canEdit\": false,\n    \"canRemove\": false\n}\n\nmsg.payload.options.map(e => {\n    if (e == \"C\") {\n        crud.canCreate = true\n    }\n    else if (e == \"R\") {\n        crud.canRead = true\n    }\n    else if (e == \"U\") {\n        crud.canEdit = true\n    } else if (e == \"D\") {\n        crud.canRemove = true\n    }\n})\n\n\nlet modules = msg.payload.moduleName.map((name, index)=> {\n    return {\n        \"name\": name,\n        \"value\": msg.payload.moduleValue[index]\n    }\n\n})\n\nlet preparedModules\n = modules.map(item => {\n    return{\n        module: item.name,\n        moduleId: objectid(item.value),\n        ...crud\n    }\n})\n\nmsg.query={\n    \"_id\":objectid(msg.payload._id)\n}\n\nmsg.payload={\n    $push: {\n        permissions: {\n            $each: [...preparedModules]\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 320,
        "y": 1580,
        "wires": [
            [
                "bb8c3b11be10027d",
                "da93f58c9901602e"
            ]
        ]
    },
    {
        "id": "5e4d4597f4c69b03",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "links": [
            "8771d95b528d34d0"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 440,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "669f5378dc89b756",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "func": "msg.collection=\"admin_roles\"\nmsg.payload={\n    deleted: false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1220,
        "wires": [
            [
                "f8d3962a2d3d4295"
            ]
        ]
    },
    {
        "id": "f8d3962a2d3d4295",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 440,
        "y": 1220,
        "wires": [
            [
                "a2903e704c5feffd",
                "22c15e1e7bf3a3ca"
            ]
        ]
    },
    {
        "id": "da93f58c9901602e",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 540,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "c1327a786ae3deed",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "func": "msg.collection =\"admin_roles\"\n\nmsg.query={\n    _id: objectid(msg.payload._id)\n}\n\nmsg.payload={\n    $set:{\n        name: msg.payload.name\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 280,
        "y": 1700,
        "wires": [
            [
                "1a8d5dbb5642beda",
                "18133ecfe411d7f0"
            ]
        ]
    },
    {
        "id": "9af1975a343bc582",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "updateRole",
        "url": "/updateRole",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1700,
        "wires": [
            [
                "c1327a786ae3deed"
            ]
        ],
        "icon": "font-awesome/fa-edit"
    },
    {
        "id": "1a8d5dbb5642beda",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 500,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "18133ecfe411d7f0",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 430,
        "y": 1720,
        "wires": []
    },
    {
        "id": "d7b0e35cdd28547a",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "deleteModuleFromRole",
        "url": "/deleteModuleFromRole",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1960,
        "wires": [
            [
                "7510771007812d39"
            ]
        ],
        "icon": "font-awesome/fa-remove"
    },
    {
        "id": "7510771007812d39",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "func": "msg.collection = \"admin_roles\";\n\nmsg.query = {\n   \"_id\": objectid(msg.payload._id)\n};\n\nconst deleteModulesId = msg.payload.moduleId.map(i => objectid(i));\n\nmsg.payload = {\n    $pull: {\n        permissions: {\n            moduleId: {\n                $in: deleteModulesId\n            }\n        }\n    }\n}\n\n// msg.payload = {\n//     $pull: {\n//         \"permissions\": {\n//             \"moduleId\": objectid(msg.payload.moduleId)\n//         }\n//     }\n// }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 340,
        "y": 1960,
        "wires": [
            [
                "2cceb3d0a93343d8",
                "9fe78a1700cc52d7",
                "83c8060a7ab3bf27"
            ]
        ]
    },
    {
        "id": "2cceb3d0a93343d8",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 560,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "1383178398d4778b",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "deleteRole",
        "url": "/deleteRole",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1820,
        "wires": [
            [
                "777f378a36dc63f0"
            ]
        ],
        "icon": "font-awesome/fa-remove"
    },
    {
        "id": "777f378a36dc63f0",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "func": "msg.collection =\"admin_roles\"\n\nmsg.query={\n    _id: objectid(msg.payload._id)\n}\n\nmsg.payload={\n    $set:{\n        deleted: true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 260,
        "y": 1820,
        "wires": [
            [
                "c387f054fc1d8ef2",
                "ee0773620e14dc5e"
            ]
        ]
    },
    {
        "id": "ee0773620e14dc5e",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 410,
        "y": 1840,
        "wires": []
    },
    {
        "id": "c387f054fc1d8ef2",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 480,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "9fe78a1700cc52d7",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 490,
        "y": 1960,
        "wires": []
    },
    {
        "id": "83c8060a7ab3bf27",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 1920,
        "wires": []
    },
    {
        "id": "a79b5a026be5770c",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 1540,
        "wires": []
    },
    {
        "id": "22c15e1e7bf3a3ca",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "all Roles",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1180,
        "wires": []
    },
    {
        "id": "d66bda1905ec670a",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "get roles",
        "func": "msg.collection = \"admin_roles\"\nlet match = {};\nif (msg.payload.name != \",\" && msg.payload.name) {\n    match = {\n        name: { $regex: msg.payload.name, $options: \"i\" }\n    }\n}\n\nmsg.payload = {\n    deleted: false, \n    ...match\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1340,
        "wires": [
            [
                "f8956004b58baaad"
            ]
        ]
    },
    {
        "id": "f8956004b58baaad",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 460,
        "y": 1340,
        "wires": [
            [
                "753babafc6ec97fd",
                "78b779b42c51cffb"
            ]
        ]
    },
    {
        "id": "78b779b42c51cffb",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "all roles",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 1300,
        "wires": []
    },
    {
        "id": "753babafc6ec97fd",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 1340,
        "wires": []
    },
    {
        "id": "881a3a438a261f6f",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "752a8b5a286babe5",
        "name": "getAllRoles",
        "url": "/getAllRoles",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1340,
        "wires": [
            [
                "d66bda1905ec670a"
            ]
        ],
        "info": "Use in: User Management"
    },
    {
        "id": "4f0b3da36fb0040c",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "login",
        "url": "/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 140,
        "wires": [
            [
                "5fd1692f7e8d87b5",
                "1b70be2e868d8c04"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "5fd1692f7e8d87b5",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "check",
        "func": "const regexEmail = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\nconst regexPassword = /^(?!.*\\s).{8,}/;\nconst email = msg.payload.email.toLowerCase();\n\nif (!regexEmail.test(email)) {\n    msg.statusCode = 401;\n    msg.payload = {\n        data: \"Email is invalid\",\n        code: 401\n    }\n\n    return [null, msg];\n\n} else if (!regexPassword.test(msg.payload.password)) {\n    msg.statusCode = 401;\n    msg.payload = {\n        data: \"The password is invalid. The value must be at least 8 characters and without whitespaces\",\n        code: 401\n    }\n\n    return [null, msg];\n    \n} else {\n    msg.collection = \"admins\"\n    msg.fromApp = msg.payload\n\n    node.warn(msg.fromApp)\n\n    msg.payload = {\n        email: email,\n        deleted: false,\n        active: true\n    }\n\n    return [msg, null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 140,
        "wires": [
            [
                "3664e53bb83334c6",
                "1aa6084c940d35b0"
            ],
            [
                "f97b0c9a1ee37a8c",
                "99624067aae5195b"
            ]
        ]
    },
    {
        "id": "abfb844120e384b4",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1230,
        "y": 120,
        "wires": []
    },
    {
        "id": "62a0db821ee1373d",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "check auth",
        "func": "\nif(msg.payload.length === 0){\n    msg.statusCode = 401;\n    msg.payload = {\n        data: \"Incorrect email or password\",\n        code:401\n    }\n    node.warn(\"Email not found\");\n    return [null,msg]\n} else {\n\n    let check = await bcrypt.compare(msg.fromApp.password, msg.payload[0].password);\n\n    if (!check) {\n        msg.statusCode = 401;\n        msg.payload = {\n            data: \"Incorrect email or password\",\n            code: 401\n        }\n        node.warn(\"Password incorrect\");\n        return [null, msg]\n    }\n\n    if (msg.payload[0].active === false) {\n        msg.statusCode = 401;\n        msg.payload = {\n            data: \"Email not activated\",\n            code: 401\n        }\n        return [null, msg]\n    }\n}\n\n\n\nreturn[msg,null]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 850,
        "y": 140,
        "wires": [
            [
                "c4b1bd96421d0281",
                "8e793c55c7af2219"
            ],
            [
                "0791faf1cee2fe7f",
                "43a4fd40f853d3a1"
            ]
        ]
    },
    {
        "id": "0791faf1cee2fe7f",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1130,
        "y": 180,
        "wires": []
    },
    {
        "id": "c4b1bd96421d0281",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "jwt token",
        "func": "msg.payload = msg.payload[0]\nconst token = jwt.sign(\n    { user_id: msg.payload._id, email:msg.payload.email },\n    \"test\",\n    {\n        expiresIn: \"1400m\",\n    }\n);\n\nmsg.cookies = {};\nmsg.cookies[\"user_token\"] = token;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 1060,
        "y": 140,
        "wires": [
            [
                "abfb844120e384b4",
                "cd1dfd3d06c80ef4"
            ]
        ]
    },
    {
        "id": "cd1dfd3d06c80ef4",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 80,
        "wires": []
    },
    {
        "id": "e78bfdb95d2722e4",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "check_token",
        "url": "/check_token",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 880,
        "wires": [
            [
                "268b887a3da70c7d",
                "f7a7e47f575cc20f"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "91e2852778907a59",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "statusCode": "401",
        "headers": {},
        "x": 1040,
        "y": 920,
        "wires": []
    },
    {
        "id": "268b887a3da70c7d",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "check jwt",
        "func": "msg.check = msg.payload;\nconst decoded = jwt.verify(msg.payload.token, 'test');\nmsg.payload = decoded\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 320,
        "y": 880,
        "wires": [
            [
                "7e24ab9c80ca59ea",
                "c86dcb9df78cebf6"
            ]
        ]
    },
    {
        "id": "7e24ab9c80ca59ea",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 840,
        "wires": []
    },
    {
        "id": "f7a7e47f575cc20f",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "Checker",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 840,
        "wires": []
    },
    {
        "id": "2c60c99cba5d66e8",
        "type": "catch",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "scope": [
            "268b887a3da70c7d"
        ],
        "uncaught": false,
        "x": 100,
        "y": 980,
        "wires": [
            [
                "7822047ac02138e4",
                "dfd63696a37ed3ef"
            ]
        ]
    },
    {
        "id": "7822047ac02138e4",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "func": "msg.payload = {\n    auth: \"Unautorizate\",\n    code: 401,\n    login_id: msg.check.login_id,\n    app_id: msg.check.app_id\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 980,
        "wires": [
            [
                "e80f4ed8349b066e",
                "ad274da8cc3c3022"
            ]
        ]
    },
    {
        "id": "e80f4ed8349b066e",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 430,
        "y": 980,
        "wires": []
    },
    {
        "id": "c86dcb9df78cebf6",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "check",
        "func": "msg.collection = \"admins\"\nmsg.fromApp = msg.payload\nmsg.payload = {\n    // email : msg.fromApp.email,\n    _id: objectid(msg.payload.user_id),\n    deleted:false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 490,
        "y": 880,
        "wires": [
            [
                "8ebd248a8eed9491",
                "1f52497bc2ed6264"
            ]
        ]
    },
    {
        "id": "bdd3c6716bf4d72a",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "check auth",
        "func": "\nif(msg.payload.length > 0){\n    msg.payload = msg.payload[0]\n    msg.user = {\n        auth: \"Success\",\n        code:200,\n        user: msg.payload\n    }\n    return [msg,null]\n}else{\n    msg.payload = {\n        auth: \"Unautorizate\",\n        code: 401,\n        login_id:msg.check.login_id,\n        app_id:msg.check.app_id\n    }\n    return [null,msg]\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 880,
        "wires": [
            [
                "c8359b5d14016069",
                "f36403b4bdb0a3b9"
            ],
            [
                "91e2852778907a59"
            ]
        ]
    },
    {
        "id": "ad274da8cc3c3022",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 1020,
        "wires": []
    },
    {
        "id": "2a1cf553e1e9ec78",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 800,
        "wires": []
    },
    {
        "id": "dfd63696a37ed3ef",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 1020,
        "wires": []
    },
    {
        "id": "63e96537c28f9852",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 840,
        "wires": []
    },
    {
        "id": "caff712e2eb791e2",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1870,
        "y": 840,
        "wires": []
    },
    {
        "id": "8e793c55c7af2219",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 80,
        "wires": []
    },
    {
        "id": "43a4fd40f853d3a1",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "err login",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 220,
        "wires": []
    },
    {
        "id": "61ea6b2dafed34ff",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 670,
        "y": 140,
        "wires": [
            [
                "62a0db821ee1373d",
                "5d9628083a55b25a"
            ]
        ]
    },
    {
        "id": "8ebd248a8eed9491",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 690,
        "y": 880,
        "wires": [
            [
                "bdd3c6716bf4d72a",
                "63e96537c28f9852"
            ]
        ]
    },
    {
        "id": "9bdeada5928fdb22",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "links": [
            "56c2fced239f2936"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1260,
        "y": 840,
        "wires": [
            [
                "8c5efef801cc1dc0",
                "aa679389020af958"
            ]
        ]
    },
    {
        "id": "8c5efef801cc1dc0",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "THIS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 800,
        "wires": []
    },
    {
        "id": "1b70be2e868d8c04",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 100,
        "wires": []
    },
    {
        "id": "30eee249014d5f9c",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "signout",
        "url": "/signout",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 340,
        "wires": [
            [
                "7bb68135adb77b5f",
                "b33db8bb0f9df1e6"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "d3246b62cc5c7d48",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "Checker",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 300,
        "wires": []
    },
    {
        "id": "c3b9152502b0b7de",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 340,
        "wires": []
    },
    {
        "id": "b33db8bb0f9df1e6",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "Checker",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 300,
        "wires": []
    },
    {
        "id": "7bb68135adb77b5f",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "check jwt",
        "func": "msg.cookies={\n    user_token: null\n}\n\nmsg.payload={\n    success: true\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            [
                "d3246b62cc5c7d48",
                "d5ece23b520b810f"
            ]
        ]
    },
    {
        "id": "d5ece23b520b810f",
        "type": "delay",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 340,
        "wires": [
            [
                "c3b9152502b0b7de"
            ]
        ]
    },
    {
        "id": "3664e53bb83334c6",
        "type": "delay",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 480,
        "y": 140,
        "wires": [
            [
                "61ea6b2dafed34ff",
                "a9c57cc5fea578f4"
            ]
        ]
    },
    {
        "id": "f36403b4bdb0a3b9",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "get roles",
        "func": "msg.collection = \"admin_roles\"\nmsg.payload = [\n    {\n        $match:{\n            \"_id\": ObjectId(msg.payload.roles)\n        }\n    },\n    {\n        $lookup: {\n            from: 'translation',\n            as: 'translation',\n            pipeline: [\n                {\n                    $match: {\n                        deleted: false,\n                        language: msg.user.user.language\n                    }\n                }\n            ]\n        }\n    },\n    {\n        $lookup:\n        {\n            from: \"admin_modules\",\n            localField: \"permissions.moduleId\",\n            foreignField: \"_id\",\n            as: \"menu\"\n    }\n},\n]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ObjectId",
                "module": "objectid"
            }
        ],
        "x": 1040,
        "y": 840,
        "wires": [
            [
                "9bdeada5928fdb22"
            ]
        ]
    },
    {
        "id": "c8359b5d14016069",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 800,
        "wires": []
    },
    {
        "id": "5d9628083a55b25a",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "msg from db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 100,
        "wires": []
    },
    {
        "id": "1aa6084c940d35b0",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "msg to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 100,
        "wires": []
    },
    {
        "id": "a9c57cc5fea578f4",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "msg delay to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 180,
        "wires": []
    },
    {
        "id": "16b45fd91269424a",
        "type": "catch",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "g",
        "scope": [
            "f36403b4bdb0a3b9"
        ],
        "uncaught": false,
        "x": 1470,
        "y": 920,
        "wires": [
            [
                "8e724f7bfa9319f6",
                "6ab136250b17e86c"
            ]
        ]
    },
    {
        "id": "8e724f7bfa9319f6",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "show err Unautorizate",
        "func": "msg.payload ={\n    auth: \"Unautorizate\",\n    code: 401,\n    login_id: msg.check.login_id,\n    }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 920,
        "wires": [
            [
                "caff712e2eb791e2",
                "6ab136250b17e86c"
            ]
        ]
    },
    {
        "id": "6ab136250b17e86c",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 980,
        "wires": []
    },
    {
        "id": "1f52497bc2ed6264",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "query to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 840,
        "wires": []
    },
    {
        "id": "baba729d5c88e013",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 440,
        "wires": []
    },
    {
        "id": "f4e52f3a41956c87",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "check ",
        "func": "const regexEmail = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\nconst regexPassword = /^(?!.*\\s).{8,}/;\nconst email = msg.payload.email.toLowerCase();\n\nif (!regexEmail.test(email)) {\n    msg.statusCode = 401;\n    msg.payload = {\n        data: \"Email is invalid\",\n        code: 401\n    }\n\n    return [null, msg];\n\n} else if (!regexPassword.test(msg.payload.password)) {\n    msg.statusCode = 401;\n    msg.payload = {\n        data: \"The password is invalid. The value must be at least 8 characters and without whitespaces\",\n        code: 401\n    }\n\n    return [null, msg];\n\n} else {\n    msg.collection = \"admins\";\n    msg.oldpayload = msg.payload;\n\n    msg.payload = {\n        email: email,\n        deleted: false\n    };\n\n    return [msg, null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 480,
        "wires": [
            [
                "25b819b5a56c3054",
                "3443d8e7d57ade22"
            ],
            [
                "9bb0630c766c1fae",
                "1b8da8f5dff0448a"
            ]
        ]
    },
    {
        "id": "25b819b5a56c3054",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 490,
        "y": 480,
        "wires": [
            [
                "7d7b3c509b17950d",
                "56afed1bb13cc979"
            ]
        ]
    },
    {
        "id": "3443d8e7d57ade22",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "msg to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 440,
        "wires": []
    },
    {
        "id": "7d7b3c509b17950d",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "check",
        "func": "if (msg.payload.length > 0) {\n    if (!msg.payload[0].active) {\n        const decoded = jwt.verify(msg.payload[0].verifyToken, 'test');\n        const dateNow = new Date().getTime();\n\n        if (decoded.exp < dateNow) {\n            msg.query = { _id: objectid(msg.payload[0]._id) }\n            msg.payload = {\n                $set: {\n                    deleted: false\n                }\n            }\n\n            return [null, null, msg, null]\n        } else {\n            msg.payload = {\n                verifyToken: msg.payload[0].verifyToken,\n                email: msg.payload[0].email\n            }\n\n            return [null, null, null, msg]\n        }\n    } else {\n        msg.payload = {\n            data: \"This email address already exists\",\n            code: 400,\n        }\n        return [null, msg, null, null]\n    }\n}\nelse {\n    return [msg, null, null, null]\n}\n\n\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            },
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 650,
        "y": 480,
        "wires": [
            [
                "d1143196b526568d",
                "2a9c245b96099f4e"
            ],
            [
                "dca099b2fda6a31e",
                "612c15931c94db0f"
            ],
            [
                "8cbf4dcd5bda929e"
            ],
            [
                "84a3404c5002c4f7"
            ]
        ]
    },
    {
        "id": "d1143196b526568d",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "registration user",
        "func": "let randomColor = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\nlet encryptedPassword = await bcrypt.hash(msg.oldpayload.password, 10);\nconst verifyToken = await jwt.sign(\n    { id: Math.round(Math.random()) },\n    \"test\",\n    {\n        expiresIn: \"150m\",\n    }\n);\n\nmsg.cookies = {};\nmsg.cookies[\"verify_token\"] = verifyToken;\nmsg.cookies[\"email_register\"] = msg.oldpayload.email;\n\nmsg.payload = {\n    \"_id\": objectid(),\n    \"deleted\": false,\n    \"avatarColor\": randomColor,\n    \"createdAt\": new Date(),\n    \"roles\": [objectid(\"\")],\n    \"active\": false,\n    \"firstname\": msg.oldpayload.firstname,\n    \"lastname\": msg.oldpayload.lastname,\n    \"email\": msg.oldpayload.email.toLowerCase(),\n    \"password\": encryptedPassword,\n    verifyToken,\n    resetPassToken: \"\",\n    resetPassExpireToken: null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            },
            {
                "var": "bcrypt",
                "module": "bcrypt"
            },
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 1040,
        "y": 420,
        "wires": [
            [
                "84a3404c5002c4f7",
                "eeceed583550e3fa",
                "faaade0d0c380b57"
            ]
        ]
    },
    {
        "id": "dca099b2fda6a31e",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 860,
        "y": 460,
        "wires": []
    },
    {
        "id": "612c15931c94db0f",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "err when created user",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 360,
        "wires": []
    },
    {
        "id": "2a9c245b96099f4e",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 400,
        "wires": []
    },
    {
        "id": "faaade0d0c380b57",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "links": [
            "8771d95b528d34d0"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1240,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "84a3404c5002c4f7",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "msg to email",
        "func": "const token = msg.payload.verifyToken;\nconst nodeUrl = env.get(\"nodeUrl\");\nconst url = `${nodeUrl}/verifyToken?token=${token}`;\nconst text = `\n<div style=\"padding: 10px 0; color: black;\">\n    <h1>Confirm Your Email Address</h1>\n    <p>Tap the button below to confirm your email address. If you didn't create an account, you can delete this email.</p>\n    <a href=\"${url}\" target=\"_blank\" style=\"margin: 10px 0; display: inline-block; padding: 16px 36px; font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; color: #ffffff; text-decoration: none; border-radius: 6px; background: #95e4f0;\">Confirm</a>\n</div>\n`;\n\nmsg.to = msg.payload.email;\nmsg.topic = 'Verify';\nmsg.payload = text;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 1010,
        "y": 580,
        "wires": [
            [
                "621d5d5a41669c64",
                "d5af917bfe74ba4c"
            ]
        ]
    },
    {
        "id": "eeceed583550e3fa",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 420,
        "wires": []
    },
    {
        "id": "621d5d5a41669c64",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "msg to email",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 540,
        "wires": []
    },
    {
        "id": "d5af917bfe74ba4c",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1190,
        "y": 620,
        "wires": []
    },
    {
        "id": "65b608719a7b1d8f",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "repeatRegisterEmail",
        "url": "/repeatRegisterEmail",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "12507e3542cead46",
                "52911e87debd8301"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "12507e3542cead46",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "email and token",
        "func": "msg.payload = {\n    verifyToken: msg.req.cookies.verify_token,\n    email: msg.req.cookies.email_register.toLowerCase()\n}\nmsg.email = msg.req.cookies.email_register.toLowerCase();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 680,
        "wires": [
            [
                "4f4233c2503ef413",
                "fca1a6e7c2a907ba"
            ]
        ]
    },
    {
        "id": "52911e87debd8301",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "came",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 720,
        "wires": []
    },
    {
        "id": "7d24a5806739b5fb",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 910,
        "y": 720,
        "wires": []
    },
    {
        "id": "fca1a6e7c2a907ba",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "msg to email",
        "func": "const token = msg.payload.verifyToken;\nconst nodeUrl = env.get(\"nodeUrl\");\nconst url = `${nodeUrl}/verifyToken?token=${token}`;\nconst text = `\n<div style=\"padding: 10px 0; color: black;\">\n    <h1>Confirm Your Email Address</h1>\n    <p>Tap the button below to confirm your email address. If you didn't create an account, you can delete this email.</p>\n    <a href=\"${url}\" target=\"_blank\" style=\"margin: 10px 0; display: inline-block; padding: 16px 36px; font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; color: #ffffff; text-decoration: none; border-radius: 6px; background: #95e4f0;\">Confirm</a>\n</div>\n`;\n\nmsg.to = msg.payload.email;\nmsg.topic = 'Verify';\nmsg.payload = text;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 570,
        "y": 680,
        "wires": [
            [
                "38264f88df3f51f8",
                "3f2728a428f70979"
            ]
        ]
    },
    {
        "id": "38264f88df3f51f8",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "repeat msg to email",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 640,
        "wires": []
    },
    {
        "id": "4f4233c2503ef413",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 640,
        "wires": []
    },
    {
        "id": "3f2728a428f70979",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "msg to page",
        "func": "msg.payload = {\n    data: `We sent the email \"${msg.email}\" again. Please, check your inbox or spam.`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 720,
        "wires": [
            [
                "7d24a5806739b5fb",
                "787c14ff2d5c5657"
            ]
        ]
    },
    {
        "id": "787c14ff2d5c5657",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "finish",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 680,
        "wires": []
    },
    {
        "id": "72dddb2443952553",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "registration",
        "url": "/registration",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 480,
        "wires": [
            [
                "f4e52f3a41956c87",
                "baba729d5c88e013"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "8cbf4dcd5bda929e",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 900,
        "y": 500,
        "wires": [
            [
                "d1143196b526568d"
            ]
        ]
    },
    {
        "id": "56afed1bb13cc979",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "7cf09a5628ba29e5",
        "name": "db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 540,
        "wires": []
    },
    {
        "id": "8bf11e1db155c406",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "d47c4baf98dd7d3b",
        "name": "verifyToken",
        "url": "/verifyToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 870,
        "y": 1220,
        "wires": [
            [
                "f05c31a436d493c1",
                "28e417acf6703c8e"
            ]
        ]
    },
    {
        "id": "b19133390f7fff7a",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "d47c4baf98dd7d3b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1610,
        "y": 1220,
        "wires": []
    },
    {
        "id": "28e417acf6703c8e",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "d47c4baf98dd7d3b",
        "name": "query to db",
        "func": "msg.collection = \"admins\";\nmsg.cameToken = msg.payload.token;\n\nmsg.payload = {\n    verifyToken: msg.payload.token\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1220,
        "wires": [
            [
                "38300e6abcb36ac3",
                "f8ac81b8f44aa1c1"
            ]
        ]
    },
    {
        "id": "f05c31a436d493c1",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "d47c4baf98dd7d3b",
        "name": "came",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1180,
        "wires": []
    },
    {
        "id": "15bc335d0fad3f03",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "d47c4baf98dd7d3b",
        "name": "finish",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1180,
        "wires": []
    },
    {
        "id": "38300e6abcb36ac3",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "d47c4baf98dd7d3b",
        "name": "query to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 1180,
        "wires": []
    },
    {
        "id": "a7b60ea648465b13",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "d47c4baf98dd7d3b",
        "name": "res db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 1180,
        "wires": []
    },
    {
        "id": "2ebbf3d403304123",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "d47c4baf98dd7d3b",
        "name": "redirect to page",
        "func": "node.warn(msg)\nconst token = await jwt.sign(\n    { user_id: msg.payload[0]._id, email: msg.payload[0].email },\n    \"test\",\n    {\n        expiresIn: \"150m\",\n    }\n);\n\nconst uiUrl = env.get(\"uiUrl\");\n\nmsg.token = token\nmsg.statusCode = 302\nmsg.headers = {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Credentials\": true,\n    \"location\": `${uiUrl}/Login`\n}\n\nmsg.collection = \"admins\";\nmsg.query = {\n    _id: objectid(msg.payload[0]._id)\n}\nmsg.payload = {\n    $set: {\n        active: true,\n        verifyToken: null\n    }\n}\n\nnode.send(msg)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            },
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1440,
        "y": 1220,
        "wires": [
            [
                "b19133390f7fff7a",
                "15bc335d0fad3f03",
                "4ca2aafdce75631b"
            ]
        ]
    },
    {
        "id": "f8ac81b8f44aa1c1",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "d47c4baf98dd7d3b",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1280,
        "y": 1220,
        "wires": [
            [
                "2ebbf3d403304123",
                "a7b60ea648465b13"
            ]
        ]
    },
    {
        "id": "4ca2aafdce75631b",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "d47c4baf98dd7d3b",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1680,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "ab301c55037892a5",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "queryToResetPassword",
        "url": "/queryToResetPassword",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 900,
        "y": 1660,
        "wires": [
            [
                "33cd63d87b4e381c",
                "de3eb89f39a1530a"
            ]
        ]
    },
    {
        "id": "33cd63d87b4e381c",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "came",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 1620,
        "wires": []
    },
    {
        "id": "de3eb89f39a1530a",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "query to db",
        "func": "msg.collection = \"admins\";\nmsg.token = msg.payload.token;\n\nmsg.payload = {\n    resetPassToken: msg.payload.token\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1660,
        "wires": [
            [
                "c48a80eca03bbba4",
                "c3173697fb7f4bac"
            ]
        ]
    },
    {
        "id": "c48a80eca03bbba4",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "query to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1620,
        "wires": []
    },
    {
        "id": "c3173697fb7f4bac",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1350,
        "y": 1660,
        "wires": [
            [
                "348f8ae5da73c0d5",
                "15933ef85e8b2695"
            ]
        ]
    },
    {
        "id": "348f8ae5da73c0d5",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "redirect to page",
        "func": "const dateNow = new Date().getTime();\nconst uiUrl = env.get(\"uiUrl\");\n\nif (msg.payload[0].resetPassExpireToken > dateNow) {\n    msg.statusCode = 302\n    msg.headers = {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Credentials\": true,\n        \"location\": `${uiUrl}/ResetPassword?token=${msg.token}`\n    }\n} else {\n    msg.payload = '<h1>Link expired</h1>';\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "https://nodered-0131-64942bd3a77d221100000463.ubos.tech/?#objectid",
                "module": "objectid"
            },
            {
                "var": "jsonwebtoken",
                "module": "jsonwebtoken"
            }
        ],
        "x": 1520,
        "y": 1660,
        "wires": [
            [
                "b89f08cda462a95f",
                "9fec925d9c6148b0"
            ]
        ]
    },
    {
        "id": "15933ef85e8b2695",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "res db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 1620,
        "wires": []
    },
    {
        "id": "b89f08cda462a95f",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1690,
        "y": 1660,
        "wires": []
    },
    {
        "id": "9fec925d9c6148b0",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "finish queryToResetPassword",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 1620,
        "wires": []
    },
    {
        "id": "0614831a6dd18bbb",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "sendEmailForResetPassword",
        "url": "/sendEmailForResetPassword",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 920,
        "y": 1480,
        "wires": [
            [
                "0b8815511f027788",
                "acc53e48e5c37796"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "0b8815511f027788",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "query to db",
        "func": "const regexEmail = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\nconst email = msg.payload.email.toLowerCase();\n\nif (!regexEmail.test(email)) {\n\n    msg.statusCode = 401;\n    msg.payload = {\n        data: \"Email is invalid\",\n        code: 401\n    }\n\n    return [null, msg];\n\n} else {\n    msg.collection = \"admins\";\n\n    msg.email = msg.payload.email;\n\n    msg.payload = {\n        email: email,\n        deleted: false\n    }\n\n    return [msg, null];\n} \n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1480,
        "wires": [
            [
                "a64da465eda134a3"
            ],
            [
                "cda158a3d19d64d9",
                "7a70680f44f5df9c"
            ]
        ]
    },
    {
        "id": "acc53e48e5c37796",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "came",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 1440,
        "wires": []
    },
    {
        "id": "a64da465eda134a3",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1390,
        "y": 1480,
        "wires": [
            [
                "3839f7c847da4d06",
                "2757cb2a62d54166"
            ]
        ]
    },
    {
        "id": "3839f7c847da4d06",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "send response",
        "func": "if (msg.payload.length === 0){\n    msg.statusCode = 401;\n\n    msg.payload = {\n        data: \"Forbidden! Incorrect email.\",\n        code: 401\n    }\n    return [null, msg]\n}\n\nmsg.payload = msg.payload[0];\n    \nreturn[msg, null]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 1480,
        "wires": [
            [
                "f949b57456c57058",
                "8427d42401796f0a"
            ],
            [
                "ca3b0d180179516b",
                "f0fde05b39c69287"
            ]
        ]
    },
    {
        "id": "2757cb2a62d54166",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "Item after DB",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 1440,
        "wires": []
    },
    {
        "id": "f949b57456c57058",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "item",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 1420,
        "wires": []
    },
    {
        "id": "8427d42401796f0a",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "query to db",
        "func": "// Add 30 minutes\nconst date = new Date();\nconst expireTime = date.setMinutes(date.getMinutes() + 30);\nconst token = crypto.randomBytes(64).toString('hex');\n\nmsg.oldpayload = msg.payload;\nmsg.token = token;\n\nmsg.cookies = {};\nmsg.cookies[\"user_email\"] = msg.email;\n\nmsg.collection = \"admins\";\nmsg.query = {\n    _id: objectid(msg.payload._id)\n}\nmsg.payload = {\n    $set: {\n        resetPassToken: token,\n        resetPassExpireToken: expireTime\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            },
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 1750,
        "y": 1460,
        "wires": [
            [
                "cb0efb585b6584ea",
                "5b474b857331162b",
                "216c8a6f073f5011"
            ]
        ]
    },
    {
        "id": "ca3b0d180179516b",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1730,
        "y": 1500,
        "wires": []
    },
    {
        "id": "f0fde05b39c69287",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "err email not found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 1540,
        "wires": []
    },
    {
        "id": "cb0efb585b6584ea",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "query to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 1380,
        "wires": []
    },
    {
        "id": "5b474b857331162b",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "msg to email",
        "func": "const nodeUrl = env.get(\"nodeUrl\");\nconst url = `${nodeUrl}/queryToResetPassword?token=${msg.token}`;\n\nconst text = `\n<div style=\"padding: 10px 0; color: black;\">\n    <h1>We received a request to reset your password</h1>\n    <p>Use the link below to set up a new password for your account. If you did not request to reset your password, ignore this email and the link will expire on its own.</p>\n    <a href=\"${url}\" target=\"_blank\" style=\"margin: 10px 0; display: inline-block; padding: 16px 36px; font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; color: #ffffff; text-decoration: none; border-radius: 6px; background: #2E3D49;\">\n        SET NEW PASSWORD\n    </a>\n</div>\n`;\n\nmsg.to = msg.oldpayload.email;\nmsg.topic = 'Reset password';\nmsg.payload = text;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 1930,
        "y": 1460,
        "wires": [
            [
                "47112228019a0ace",
                "73896d5cbf2b11df"
            ]
        ]
    },
    {
        "id": "216c8a6f073f5011",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1980,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "47112228019a0ace",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2150,
        "y": 1500,
        "wires": []
    },
    {
        "id": "73896d5cbf2b11df",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "finish sendEmailForResetPassword",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 1420,
        "wires": []
    },
    {
        "id": "8bd61a8f68025413",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "resetPassword",
        "url": "/resetPassword",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 880,
        "y": 1860,
        "wires": [
            [
                "faf358394ddc4fe6",
                "e5a3c3eb0171a5bd"
            ]
        ],
        "icon": "font-awesome/fa-edit"
    },
    {
        "id": "faf358394ddc4fe6",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "came resetPassword",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1820,
        "wires": []
    },
    {
        "id": "e5a3c3eb0171a5bd",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "query to db",
        "func": "msg.newPassword = msg.payload.password;\n\nmsg.collection = \"admins\";\nmsg.payload = {\n    resetPassToken: msg.payload.token\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1860,
        "wires": [
            [
                "f393416741ceb5bb"
            ]
        ]
    },
    {
        "id": "f393416741ceb5bb",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1280,
        "y": 1860,
        "wires": [
            [
                "1e3f1d731ea39467",
                "f94300e01993e46c"
            ]
        ]
    },
    {
        "id": "f94300e01993e46c",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "query update pass",
        "func": "const dateNow = new Date().getTime();\nlet check = await bcrypt.compare(msg.newPassword, msg.payload[0].password);\nlet encryptedPassword = await bcrypt.hash(msg.newPassword, 10);\n\nmsg.oldpayload = msg.payload;\n\nif (msg.payload[0].resetPassExpireToken < dateNow) {\n\n    msg.payload = '<h1>link expired</h1>';\n\n} else {\n\n    if (!!check) {\n\n        msg.statusCode = 401;\n        msg.payload = {\n            data: 'The password must be different from the previous one',\n            code: 401\n        }\n\n        return [null, msg];\n\n    } else {\n        \n        msg.collection = \"admins\";\n        msg.query = {\n            _id: objectid(msg.payload[0]._id)\n        }\n        msg.payload = {\n            $set: {\n                password: encryptedPassword,\n                resetPassToken: \"\",\n                resetPassExpireToken: null\n            }\n        }\n        \n        return [msg, null];\n\n    }\n\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            },
            {
                "var": "objectid",
                "module": "objectid"
            },
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 1470,
        "y": 1860,
        "wires": [
            [
                "36f9a70a94832862",
                "030414dfd3ed59a5",
                "fcb9bc55f1082cf3"
            ],
            [
                "6ed5acebd2a44763"
            ]
        ]
    },
    {
        "id": "1e3f1d731ea39467",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "res db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 1820,
        "wires": []
    },
    {
        "id": "36f9a70a94832862",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "query to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 1780,
        "wires": []
    },
    {
        "id": "030414dfd3ed59a5",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "msg to email",
        "func": "const uiUrl = env.get(\"uiUrl\");\nconst url = `${uiUrl}/Login`;\nconst dateChanged = new Date().toString().slice(0, 24);\nconst text = `\n<div style=\"padding: 10px 0; color: black;\" display: block;>\n    <img src=\"https://www.iconpacks.net/icons/2/free-icon-check-mark-3280.png\"; alt=\"Success Icon\"; width=90px; height=90px;>\n    <h1 text-align=\"center\" >Password changed!</h1>\n    <p>\n        Your password has been changed successfully. \n        This is a confirmation that your password was changed at <b>${dateChanged}</b>\n        <br><br>\n        Use your new password to log in.\n    </p>\n    <a href=\"${url}\" target=\"_blank\" style=\"margin: 10px 0; display: inline-block; padding: 16px 36px; font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; color: #ffffff; text-decoration: none; border-radius: 6px; background: #72D393;\">\n        <b>LOGIN NOW</b>\n    </a>\n</div>\n`;\n\nmsg.to = msg.oldpayload[0].email;\nmsg.topic = 'Password changed';\nmsg.payload = text;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 1670,
        "y": 1860,
        "wires": [
            [
                "c5b4ccce77d03e87",
                "0617a8c9543f9896"
            ]
        ]
    },
    {
        "id": "fcb9bc55f1082cf3",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1680,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "c5b4ccce77d03e87",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "finish sendEmailForResetPassword",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1960,
        "y": 1780,
        "wires": []
    },
    {
        "id": "0617a8c9543f9896",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1870,
        "y": 1860,
        "wires": []
    },
    {
        "id": "6ed5acebd2a44763",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "same pasword",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1920,
        "wires": [
            [
                "5322da50da8b810a"
            ]
        ]
    },
    {
        "id": "5322da50da8b810a",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "b69c8ee37e3e0852",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1850,
        "y": 1920,
        "wires": []
    },
    {
        "id": "f5be1263c0467e95",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "delete user query",
        "func": "msg.collection = \"admins\"\n\nmsg.query = {\n    \"_id\": objectid(msg.payload._id)\n};\n\nmsg.payload = {\n    $set: { \"deleted\": true }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 350,
        "y": 3400,
        "wires": [
            [
                "9c4e434bd50c7629",
                "6f74a492cde629ef",
                "055f25983fece25e"
            ]
        ]
    },
    {
        "id": "e06c13c7edcdcd74",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "get users query",
        "func": "msg.collection = \"admins\";\n\nmsg.payload=[\n    {\n      $match:{\n        deleted:false\n      }\n    },\n    {\n      $lookup: {\n       \"from\": \"admin_roles\",\n       \"localField\": \"roles\",\n       \"foreignField\":\"_id\",\n       \"as\": \"role_items\"\n     }\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3120,
        "wires": [
            [
                "ac19deab86cb78e0",
                "db9c3ea65883774f"
            ]
        ]
    },
    {
        "id": "e53113f64379a00a",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "getUsers",
        "url": "/getUsers",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 3120,
        "wires": [
            [
                "e06c13c7edcdcd74"
            ]
        ]
    },
    {
        "id": "ac19deab86cb78e0",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "",
        "links": [
            "56c2fced239f2936"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 560,
        "y": 3120,
        "wires": [
            [
                "c905fee71d44c8d6",
                "4cbf03980d53b40c"
            ]
        ]
    },
    {
        "id": "4cbf03980d53b40c",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 910,
        "y": 3120,
        "wires": []
    },
    {
        "id": "c905fee71d44c8d6",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "all users",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 3080,
        "wires": []
    },
    {
        "id": "cbe2971087f33fe5",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "editUserRole",
        "url": "/editUserRole",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 3240,
        "wires": [
            [
                "805f5b498ea3ba78"
            ]
        ],
        "icon": "font-awesome/fa-edit"
    },
    {
        "id": "805f5b498ea3ba78",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "edit role query",
        "func": "msg.collection = \"admins\";\n\nmsg.query = {\n    \"_id\": objectid(msg.payload._id)\n}\n\nmsg.payload = {\n    $set: {\n        \"roles\": [objectid(msg.payload.role)]\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 340,
        "y": 3240,
        "wires": [
            [
                "30c126c804b1a781",
                "751980e9e08597cb",
                "ca45317f305a9e94"
            ]
        ]
    },
    {
        "id": "751980e9e08597cb",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 580,
        "y": 3200,
        "wires": [
            []
        ]
    },
    {
        "id": "30c126c804b1a781",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 510,
        "y": 3240,
        "wires": []
    },
    {
        "id": "ca45317f305a9e94",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "user role edited",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 3280,
        "wires": []
    },
    {
        "id": "11ae1973a48d1646",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "deleteUser",
        "url": "/deleteUser",
        "method": "delete",
        "upload": true,
        "swaggerDoc": "",
        "x": 100,
        "y": 3400,
        "wires": [
            [
                "f5be1263c0467e95"
            ]
        ],
        "icon": "font-awesome/fa-remove"
    },
    {
        "id": "9c4e434bd50c7629",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "deleteUser msg to DB",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 3440,
        "wires": []
    },
    {
        "id": "055f25983fece25e",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 3400,
        "wires": []
    },
    {
        "id": "6f74a492cde629ef",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 600,
        "y": 3360,
        "wires": [
            []
        ]
    },
    {
        "id": "52c5f9f84fbd0e5a",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "createUser",
        "url": "/createUser",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 3580,
        "wires": [
            [
                "1cfa1bef551eea8c",
                "5a847e417c0b356f"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "1cfa1bef551eea8c",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "query",
        "func": "msg.collection = \"admins\";\nmsg.oldpayload = msg.payload;\n\nmsg.payload = {\n    email: msg.payload.email,\n    deleted: false\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 3580,
        "wires": [
            [
                "a09abdd606dfe92f",
                "e7b39c38c93e3854"
            ]
        ]
    },
    {
        "id": "5a847e417c0b356f",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 3620,
        "wires": []
    },
    {
        "id": "a09abdd606dfe92f",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 480,
        "y": 3580,
        "wires": [
            [
                "9159b9aa416b3084",
                "755a42caae4e1af0"
            ]
        ]
    },
    {
        "id": "e7b39c38c93e3854",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "msg to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 3540,
        "wires": []
    },
    {
        "id": "9159b9aa416b3084",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "check",
        "func": "if (msg.payload.length > 0) {\n    msg.payload = {\n        data: \"This email address already exists\",\n        code: 400,\n    }\n    return [null, msg]\n}\nelse{\n    return [msg, null]\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3580,
        "wires": [
            [
                "f1cc129781765941",
                "34bdf0171571de42"
            ],
            [
                "c6e9cd738f822557",
                "830a855b4d7f7858"
            ]
        ]
    },
    {
        "id": "755a42caae4e1af0",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 3620,
        "wires": []
    },
    {
        "id": "c6e9cd738f822557",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 820,
        "y": 3620,
        "wires": []
    },
    {
        "id": "830a855b4d7f7858",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "err when created user",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 3660,
        "wires": []
    },
    {
        "id": "f1cc129781765941",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "registration user",
        "func": "let randomColor = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\nlet encryptedPassword = await bcrypt.hash(msg.oldpayload.password, 10);\n\nmsg.payload = {\n    \"_id\": objectid(),\n    \"deleted\": false,\n    \"avatarColor\": randomColor,\n    \"createdAt\": new Date(),\n    \"roles\": [objectid(msg.oldpayload.role)],\n    \"active\": true,\n    \"firstname\": msg.oldpayload.firstname,\n    \"lastname\": msg.oldpayload.lastname,\n    \"email\": msg.oldpayload.email,\n    \"password\": encryptedPassword,\n    verifyToken: null,\n    resetPassToken: \"\",\n    resetPassExpireToken: null\n}\n\nreturn msg;\n\n\n\n\n\n\n\n// let randomColor = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n// let encryptedPassword = await bcrypt.hash(msg.oldpayload.password, 10);\n// const verifyToken = await jwt.sign(\n//     { id: Math.round(Math.random()) },\n//     \"test\",\n//     {\n//         expiresIn: \"150m\",\n//     }\n// );\n\n// msg.cookies = {};\n// msg.cookies[\"verify_token\"] = verifyToken;\n// msg.cookies[\"email_register\"] = msg.oldpayload.email;\n\n// msg.payload = {\n//     \"_id\": objectid(),\n//     \"deleted\": false,\n//     \"avatarColor\": randomColor,\n//     \"createdAt\": new Date(),\n//     \"roles\": [objectid(\"634fe97d28c82b00103cd25d\")],\n//     \"active\": false,\n//     \"firstname\": msg.oldpayload.firstname,\n//     \"lastname\": msg.oldpayload.lastname,\n//     \"email\": msg.oldpayload.email,\n//     \"password\": encryptedPassword,\n//     verifyToken,\n//     resetPassToken: \"\",\n//     resetPassExpireToken: null\n// }\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            },
            {
                "var": "bcrypt",
                "module": "bcrypt"
            },
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 840,
        "y": 3560,
        "wires": [
            [
                "8d02360a631dcfd2",
                "4db5cfe770e539c9",
                "b8b946c615b8106b"
            ]
        ]
    },
    {
        "id": "34bdf0171571de42",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 3520,
        "wires": []
    },
    {
        "id": "8d02360a631dcfd2",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 3600,
        "wires": []
    },
    {
        "id": "4db5cfe770e539c9",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "",
        "links": [
            "8771d95b528d34d0"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1090,
        "y": 3520,
        "wires": [
            []
        ]
    },
    {
        "id": "b8b946c615b8106b",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 3560,
        "wires": []
    },
    {
        "id": "db9c3ea65883774f",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "1c10aa09f2bae3b6",
        "name": "all users",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 3080,
        "wires": []
    },
    {
        "id": "e7fd978ce87aca9f",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "createParentModule",
        "url": "/createParentModule",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2280,
        "wires": [
            [
                "d70a394b4312d3ef",
                "c2b7abe6d2dfa874"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "85568b61aa0c227a",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 510,
        "y": 2240,
        "wires": []
    },
    {
        "id": "d70a394b4312d3ef",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "func": "msg.collection = \"admin_modules\"\n\nmsg.payload = {\n    ...msg.payload,\n    deleted: false,\n    isParent: false\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2280,
        "wires": [
            [
                "9552e6aaf4e9e730",
                "85568b61aa0c227a"
            ]
        ]
    },
    {
        "id": "5d71844b960e0965",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "getModules",
        "url": "/getModules",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 2160,
        "wires": [
            [
                "aa8ef0110ab08941"
            ]
        ]
    },
    {
        "id": "5c368970a09368c6",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 2160,
        "wires": []
    },
    {
        "id": "aa8ef0110ab08941",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "func": "msg.collection=\"admin_modules\"\nmsg.payload={\n    deleted:false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2160,
        "wires": [
            [
                "4c265b78766e0676"
            ]
        ]
    },
    {
        "id": "376174881ff1a55a",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "createChildModule",
        "url": "/createChildModule",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2680,
        "wires": [
            [
                "232d8d9e33cae211"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "061a5e02eefac437",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 510,
        "y": 2680,
        "wires": []
    },
    {
        "id": "232d8d9e33cae211",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "query",
        "func": "msg.collection = \"admin_modules\";\n\nif (msg.payload.parentModule) {\n    msg.query={\n        \"_id\": objectid(msg.payload.parentModule)\n    };\n\n    msg.payload = {\n        $addToSet: {\n            childModules: {\n                name: msg.payload.childModule,\n                page_id: msg.payload.childModule,\n                position: msg.payload.position\n            }\n        },\n        $set: {\n            isParent: true\n        }\n    }\n\n    return [msg,];\n} else {\n    \n    \n    msg.payload={\n        ...msg.payload,\n        deleted: false,\n        isParent: false\n    }\n    return [,msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 350,
        "y": 2680,
        "wires": [
            [
                "b29925263067250f",
                "061a5e02eefac437"
            ],
            [
                "7800f240d6ce9d3c",
                "061a5e02eefac437"
            ]
        ]
    },
    {
        "id": "a52c0bddea4b8ea1",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "deleteChildModule",
        "url": "/deleteChildModule",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2960,
        "wires": [
            [
                "1c83404957bea119",
                "f085a549ae9699b7"
            ]
        ],
        "icon": "font-awesome/fa-remove"
    },
    {
        "id": "1c83404957bea119",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "query",
        "func": "msg.collection=\"admin_modules\";\n\nmsg.query = {\n    \"_id\": objectid(msg.payload._id)\n};\n\nmsg.payload = {\n    $pull: {\n        \"childModules\": {\n            \"name\": msg.payload.childModule_id\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 350,
        "y": 2960,
        "wires": [
            [
                "dc98a8249850bce2",
                "6fbefd201f3acbfd"
            ]
        ]
    },
    {
        "id": "6fbefd201f3acbfd",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 510,
        "y": 2920,
        "wires": []
    },
    {
        "id": "4c265b78766e0676",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 480,
        "y": 2160,
        "wires": [
            [
                "5c368970a09368c6",
                "2c7eed711063667b"
            ]
        ]
    },
    {
        "id": "dc98a8249850bce2",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 560,
        "y": 2960,
        "wires": [
            []
        ]
    },
    {
        "id": "7800f240d6ce9d3c",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "links": [
            "8771d95b528d34d0"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 540,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "b29925263067250f",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 560,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "9552e6aaf4e9e730",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "links": [
            "8771d95b528d34d0"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 540,
        "y": 2280,
        "wires": [
            []
        ]
    },
    {
        "id": "f085a549ae9699b7",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "came",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 2920,
        "wires": []
    },
    {
        "id": "2730235d0daf0113",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "came",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 2800,
        "wires": []
    },
    {
        "id": "ace4106e83f92bd4",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 580,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "3d521620d0c4a209",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "updateChildModule",
        "url": "/updateChildModule",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2840,
        "wires": [
            [
                "c5a49592c2319b79",
                "2730235d0daf0113"
            ]
        ],
        "icon": "font-awesome/fa-edit"
    },
    {
        "id": "c5a49592c2319b79",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "query",
        "func": "msg.collection = \"admin_modules\";\n\nmsg.query = {\n    \"_id\": objectid(msg.payload._id),\n    \"childModules.name\": msg.payload.name\n};\n\nmsg.payload = {\n    $set: {\n        \"childModules.$.position\": msg.payload.position\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 350,
        "y": 2840,
        "wires": [
            [
                "ace4106e83f92bd4",
                "69b2546c20e0f849"
            ]
        ]
    },
    {
        "id": "69b2546c20e0f849",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 2800,
        "wires": []
    },
    {
        "id": "c2b7abe6d2dfa874",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "came",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 2240,
        "wires": []
    },
    {
        "id": "2c7eed711063667b",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "all modules",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 2120,
        "wires": []
    },
    {
        "id": "e293cccc7303a4fe",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "came",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 2480,
        "wires": []
    },
    {
        "id": "ae8e77cbc6311e1a",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "\"deleted\": true",
        "func": "msg.collection = \"admin_modules\";\n\nmsg.query = {\n    \"_id\": objectid(msg.payload._id)\n};\n\nmsg.payload = {\n    $set: {\n        deleted: true\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 360,
        "y": 2520,
        "wires": [
            [
                "5f292bba63355586",
                "32729a9b111b8383"
            ]
        ]
    },
    {
        "id": "ee6d35faa631e26d",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "url": "/deleteModule",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 2540,
        "wires": [
            [
                "ae8e77cbc6311e1a",
                "4344a46a2b2adc00",
                "e293cccc7303a4fe",
                "133ba599444e0f8b"
            ]
        ]
    },
    {
        "id": "5f292bba63355586",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "finsih parent delete",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 2520,
        "wires": []
    },
    {
        "id": "32729a9b111b8383",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 580,
        "y": 2520,
        "wires": [
            [
                "5f292bba63355586"
            ]
        ]
    },
    {
        "id": "4344a46a2b2adc00",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "delete using pull",
        "func": "msg.collection = \"admin_roles\"\n\nmsg.query = {\n    \"permissions.moduleId\": objectid(msg.payload._id)\n}\n\nmsg.payload =\n    { $pull: { \"permissions\": { \"moduleId\": objectid(msg.payload._id) } } }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 360,
        "y": 2560,
        "wires": [
            [
                "1cee9102777633e6",
                "d9f3e63efb88e1c2"
            ]
        ]
    },
    {
        "id": "1cee9102777633e6",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "finish childs delete",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 2560,
        "wires": []
    },
    {
        "id": "133ba599444e0f8b",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 2540,
        "wires": []
    },
    {
        "id": "d9f3e63efb88e1c2",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 580,
        "y": 2560,
        "wires": [
            [
                "1cee9102777633e6"
            ]
        ]
    },
    {
        "id": "1d7ed8fcc9ca2114",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "update roles",
        "func": "msg.collection = \"admin_roles\";\n\nmsg.query = {\n    \"permissions.moduleId\": objectid(msg.payload._id)\n    }\n\nmsg.payload = {\n    $set: {\n        \"permissions.$.module\": msg.payload.name\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 330,
        "y": 2360,
        "wires": [
            [
                "0fd0d2b6ef60273a",
                "aea44c2995d364d2"
            ]
        ]
    },
    {
        "id": "02e59b0e8b788849",
        "type": "http in",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "updateParentModule",
        "url": "/updateParentModule",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2380,
        "wires": [
            [
                "bc255567ba2f7b55",
                "1d7ed8fcc9ca2114",
                "0da57daeb8571c67"
            ]
        ],
        "icon": "font-awesome/fa-edit"
    },
    {
        "id": "0fd0d2b6ef60273a",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "finish",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 2360,
        "wires": []
    },
    {
        "id": "aea44c2995d364d2",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 540,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "0da57daeb8571c67",
        "type": "http response",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 2380,
        "wires": []
    },
    {
        "id": "bc255567ba2f7b55",
        "type": "function",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "update parent",
        "func": "msg.collection = \"admin_modules\";\n\nmsg.query = {\n    _id: objectid(msg.payload._id)\n};\n\nmsg.payload = {\n    $set: {\n        icon: msg.payload.icon,\n        position: msg.payload.position,\n        name: msg.payload.name\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 340,
        "y": 2400,
        "wires": [
            [
                "aed0f134a3d46198",
                "22995a8e4464c6e5"
            ]
        ]
    },
    {
        "id": "aed0f134a3d46198",
        "type": "link call",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 560,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "22995a8e4464c6e5",
        "type": "debug",
        "z": "f4036141cc030bcf",
        "g": "a89d39ed625d493a",
        "name": "finish",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 2400,
        "wires": []
    },
    {
        "id": "b9dfba77cf0659da",
        "type": "http in",
        "z": "4cba6f8219137af4",
        "name": "",
        "url": "/saveCredentials",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 240,
        "wires": [
            [
                "cebe20a19da025cb"
            ]
        ]
    },
    {
        "id": "0225b679b27c7cb6",
        "type": "http response",
        "z": "4cba6f8219137af4",
        "name": "saveCredentials",
        "statusCode": "",
        "headers": {},
        "x": 900,
        "y": 240,
        "wires": []
    },
    {
        "id": "cebe20a19da025cb",
        "type": "function",
        "z": "4cba6f8219137af4",
        "name": "set filename",
        "func": "msg.filename = '/data/credentials.json'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 240,
        "wires": [
            [
                "31926911dc3e927a"
            ]
        ]
    },
    {
        "id": "18bd79bbe3db2336",
        "type": "file",
        "z": "4cba6f8219137af4",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 600,
        "y": 240,
        "wires": [
            [
                "14d2abc0b3f41cf9"
            ]
        ]
    },
    {
        "id": "14d2abc0b3f41cf9",
        "type": "function",
        "z": "4cba6f8219137af4",
        "name": "return res",
        "func": "msg.payload={\n    success: true,\n    payload: \"Success!\"\n}\nmsg.statusCode = 200\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 240,
        "wires": [
            [
                "0225b679b27c7cb6"
            ]
        ]
    },
    {
        "id": "31926911dc3e927a",
        "type": "json",
        "z": "4cba6f8219137af4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 470,
        "y": 240,
        "wires": [
            [
                "18bd79bbe3db2336"
            ]
        ]
    },
    {
        "id": "1a1acd007e534462",
        "type": "file in",
        "z": "4cba6f8219137af4",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 360,
        "wires": [
            [
                "cbd59739d47324a6"
            ]
        ]
    },
    {
        "id": "cbd59739d47324a6",
        "type": "json",
        "z": "4cba6f8219137af4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 360,
        "wires": [
            [
                "0b634a02e2f46fc7"
            ]
        ]
    },
    {
        "id": "bf38233f75e9e634",
        "type": "http in",
        "z": "4cba6f8219137af4",
        "name": "",
        "url": "/getCredentials",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "04ad2bf4e767fd19"
            ]
        ]
    },
    {
        "id": "4bf84b38cabfd2b8",
        "type": "http response",
        "z": "4cba6f8219137af4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 910,
        "y": 360,
        "wires": []
    },
    {
        "id": "0b634a02e2f46fc7",
        "type": "function",
        "z": "4cba6f8219137af4",
        "name": "return res",
        "func": "msg.statusCode = 200\nglobal.set('isCredentialsSent', true)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 360,
        "wires": [
            [
                "4bf84b38cabfd2b8"
            ]
        ]
    },
    {
        "id": "04ad2bf4e767fd19",
        "type": "function",
        "z": "4cba6f8219137af4",
        "name": "set filename",
        "func": "msg.filename = '/data/credentials.json'\nglobal.set('isCredentialsSent', false)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 360,
        "wires": [
            [
                "1a1acd007e534462",
                "d7144c5acabd38c0"
            ]
        ]
    },
    {
        "id": "fd42a251b9afd49b",
        "type": "function",
        "z": "4cba6f8219137af4",
        "name": "default data",
        "func": "if (global.get('isCredentialsSent') === false){\n    msg.payload = {\n        \"bot_name\": '',\n        \"bot_token\": '',\n        \"openai_api\": '',\n        \"pipecone_api\": '',\n        \"pipecone_env\": '',\n        \"pipecone_index\": '',\n        //\"is_limit\": true,\n        //\"limit\": 30\n    }\n    global.set('isCredentialsSent', true)\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 400,
        "wires": [
            [
                "0b634a02e2f46fc7"
            ]
        ]
    },
    {
        "id": "d7144c5acabd38c0",
        "type": "delay",
        "z": "4cba6f8219137af4",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 475,
        "y": 400,
        "wires": [
            [
                "fd42a251b9afd49b"
            ]
        ],
        "l": false
    },
    {
        "id": "2cd32bbc5f43b1e9",
        "type": "inject",
        "z": "4cba6f8219137af4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "5ed03305ad9ca676"
            ]
        ]
    },
    {
        "id": "e3b8c26d52822ba0",
        "type": "function",
        "z": "4cba6f8219137af4",
        "name": "ENV",
        "func": "const data = msg.payload\n\nlet process_env = {\n    BOT_NAME: data.bot_name,\n    BOT_TOKEN: data.bot_token,\n    OPENAI_API: data.openai_api,\n    PIPECONE_API: data.pipecone_api,\n    PIPECONE_ENV: data.pipecone_env,\n    PIPECONE_INDEX: data.pipecone_index,\n    PRIVATE_TG_CHAT:data.private_chat,\n    PIPECONE_URL: data.pipecone_url\n}\n\nglobal.set(\"process_env\", process_env)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "219438abb376baad",
        "type": "complete",
        "z": "4cba6f8219137af4",
        "name": "",
        "scope": [
            "0225b679b27c7cb6"
        ],
        "uncaught": false,
        "x": 110,
        "y": 40,
        "wires": [
            [
                "5ed03305ad9ca676"
            ]
        ]
    },
    {
        "id": "5ed03305ad9ca676",
        "type": "function",
        "z": "4cba6f8219137af4",
        "name": "getEnvs",
        "func": "msg.filename = '/data/credentials.json'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 60,
        "wires": [
            [
                "8fe2f86059898917"
            ]
        ]
    },
    {
        "id": "8fe2f86059898917",
        "type": "file in",
        "z": "4cba6f8219137af4",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 460,
        "y": 60,
        "wires": [
            [
                "22c15a24c4d0adfa"
            ]
        ]
    },
    {
        "id": "22c15a24c4d0adfa",
        "type": "json",
        "z": "4cba6f8219137af4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 545,
        "y": 60,
        "wires": [
            [
                "e3b8c26d52822ba0",
                "e2ddfce36897aa9d"
            ]
        ],
        "l": false
    },
    {
        "id": "e2ddfce36897aa9d",
        "type": "debug",
        "z": "4cba6f8219137af4",
        "name": "debug 425",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 100,
        "wires": []
    },
    {
        "id": "686d5ff43aab4bf9",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "url": "/divideFile",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1320,
        "wires": [
            [
                "e2f96b818dbf2d36"
            ]
        ]
    },
    {
        "id": "e2f96b818dbf2d36",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "check type",
        "func": "\nmsg.collection = \"knowledgeObjects\";\nmsg.oldPayload = msg.payload;\nmsg.type = msg.payload.type;\nmsg.urlName = msg.oldPayload.link;\nmsg.fileType = msg.payload.file_type;\nmsg._id = objectid(msg.payload.id);\n\n\nif(msg.type ===\"Points\"){\n    return [msg,null,null]\n}\nif(msg.type ===\"Paragraphs\"){\n    return[null,msg,null]\n}\nif (msg.type ===\"Question-Answer\"){\n    return [null, null, msg]\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 350,
        "y": 1320,
        "wires": [
            [
                "805192a45b1dfb1f",
                "35737464a5bac056"
            ],
            [
                "343d6eebe20761d7",
                "35737464a5bac056"
            ],
            [
                "81c78fbc7d3217d5",
                "35737464a5bac056"
            ]
        ]
    },
    {
        "id": "805192a45b1dfb1f",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "check file Type",
        "func": "if (msg.fileType ===\"Link\"){\n    return [msg,null,null]\n} if (msg.fileType === \"File\"){\n    return[null,msg,null]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1300,
        "wires": [
            [
                "7e3ff8422001942a"
            ],
            [
                "4b6f1eb42b88da74"
            ]
        ]
    },
    {
        "id": "dedc8713aa88daf6",
        "type": "http request",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "Get Link Info",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 970,
        "y": 1260,
        "wires": [
            [
                "5ca28cbdb2d92066"
            ]
        ]
    },
    {
        "id": "7e3ff8422001942a",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "func": "\nmsg.url = msg.oldPayload.link;\n\n\n    return msg\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 800,
        "y": 1260,
        "wires": [
            [
                "dedc8713aa88daf6"
            ]
        ]
    },
    {
        "id": "cfa67c0faae732a5",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "Create Pages",
        "func": "\nlet str = msg.payload\nmsg.payload  = msg.payload\nconst result = str.split(\".\").map(paragraph => ({ text: paragraph.split() }))\n\nmsg.array = result;\n\n\nif (msg.oldPayload.anrichment) {\n    return [null, msg]\n} else {\n    return [msg, null]\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1260,
        "wires": [
            [
                "162158f556a80497",
                "0293ec9c022d79f4"
            ],
            [
                "162158f556a80497",
                "ca26229730123383"
            ]
        ]
    },
    {
        "id": "5ca28cbdb2d92066",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "Scrape",
        "func": "\nconst { extractor } = unfluff;\n\nmsg.payload = unfluff(msg.payload);\nmsg.payload.originalSourceUrl = msg.responseUrl;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "unfluff",
                "module": "unfluff"
            }
        ],
        "x": 1120,
        "y": 1260,
        "wires": [
            [
                "f4411d154ac1cb06"
            ]
        ]
    },
    {
        "id": "4be769eac39e255b",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "create vector",
        "func": "\nmsg.collection = \"knowledgeObjects\"\ndelete msg.filepath;\ndelete msg.filename;\n\n\nmsg.query = { \"_id\": msg._id }\nlet result = msg.payload.text[0]\n\nmsg.payload = {\n\n   \"$push\": {\n      \"vectors\": {\n         id: Date.now().toString(),\n         pinecone: false,\n         metadata: { url: msg.urlName, result: result, question:\"\"},\n      }\n   }\n\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1635,
        "y": 1220,
        "wires": [
            [
                "0b3b3965772292fa",
                "2b0b88cae098c7a9"
            ]
        ],
        "l": false
    },
    {
        "id": "0293ec9c022d79f4",
        "type": "array-loop",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "key": "count",
        "keyType": "msg",
        "reset": false,
        "resetValue": "value-null",
        "array": "array",
        "arrayType": "msg",
        "x": 1640,
        "y": 1140,
        "wires": [
            [
                "7aa9e7878f282bf1"
            ],
            [
                "4be769eac39e255b"
            ]
        ]
    },
    {
        "id": "3a033404aaeb8479",
        "type": "file in",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "filename": "filepath",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1120,
        "y": 1380,
        "wires": [
            [
                "81d103f3847b6d65"
            ]
        ]
    },
    {
        "id": "ba7d9ba90e21b85e",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "function 326",
        "func": "\nmsg.payload = msg.oldPayload.file[0].data\n\nconst decodedFilename = `/${msg.oldPayload.link}`;\n\nconst outputString = decodedFilename.replace(/י/g, '`')\n\nmsg.filepath = \"/data/storage/\" + outputString;\n// msg.filepath = \"/data/storage/14_16274_SI_Introduction.pdf\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1380,
        "wires": [
            [
                "3a033404aaeb8479"
            ]
        ]
    },
    {
        "id": "81d103f3847b6d65",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "Create Pages",
        "func": "\nlet str = msg.payload\nmsg.ll = msg.payload.length;\nconst result = str.split(\".\").map(paragraph => ({ text: paragraph.split() }))\n\nmsg.array = result;\nnode.warn(msg.array)\n\n\nif (msg.oldPayload.anrichment) {\n    return [null, msg]\n} else {\n    return [msg, null]\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "natural",
                "module": "natural"
            }
        ],
        "x": 1380,
        "y": 1380,
        "wires": [
            [
                "162158f556a80497",
                "0293ec9c022d79f4"
            ],
            [
                "162158f556a80497",
                "ca26229730123383"
            ]
        ]
    },
    {
        "id": "cd0e561ad445f426",
        "type": "http request",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "Get Link Info",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 990,
        "y": 1520,
        "wires": [
            [
                "9eeda30ab8a3e81f"
            ]
        ]
    },
    {
        "id": "958774fd3c549439",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "func": "\n\nmsg.url = msg.oldPayload.link;\n\n\n    return msg\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 820,
        "y": 1520,
        "wires": [
            [
                "cd0e561ad445f426"
            ]
        ]
    },
    {
        "id": "f936d8bcc43cfdf6",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "Create Pages",
        "func": "let str = msg.payload\nmsg.ll = msg.payload.length;\n\nconst result = str.split('\\n\\n').map(paragraph => ({ text: paragraph }))\n\nmsg.array =result;\n\n\nif (msg.oldPayload.anrichment){\n    return [null, msg]\n}else{\n    return[msg, null]\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "natural",
                "module": "natural"
            }
        ],
        "x": 1420,
        "y": 1520,
        "wires": [
            [
                "ed222f0c52f5bbc8",
                "075cd5f3c274ca98"
            ],
            [
                "3b529a0ad5978908",
                "075cd5f3c274ca98"
            ]
        ]
    },
    {
        "id": "9eeda30ab8a3e81f",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "Scrape",
        "func": "\nconst { extractor } = unfluff;\n\nmsg.payload = unfluff(msg.payload);\nmsg.payload.originalSourceUrl = msg.responseUrl;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "unfluff",
                "module": "unfluff"
            }
        ],
        "x": 1180,
        "y": 1520,
        "wires": [
            [
                "8bbeceb6411b448f"
            ]
        ]
    },
    {
        "id": "752b7200cc83b1e2",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "create vector",
        "func": "msg.collection = \"knowledgeObjects\"\ndelete msg.filepath;\ndelete msg.filename;\n\n\nmsg.query = { \"_id\": msg._id }\nlet result = msg.payload.text\nmsg.payload = {\n\n   \"$push\": {\n      \"vectors\": {\n         id: Date.now().toString(),\n         pinecone: false,\n         metadata: { url: msg.urlName, result: result, question:\"\"},\n      }\n   }\n\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1735,
        "y": 1620,
        "wires": [
            [
                "ed222f0c52f5bbc8",
                "2eb7416a949db88c"
            ]
        ],
        "l": false
    },
    {
        "id": "ed222f0c52f5bbc8",
        "type": "array-loop",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "key": "count",
        "keyType": "msg",
        "reset": false,
        "resetValue": "value-null",
        "array": "array",
        "arrayType": "msg",
        "x": 1770,
        "y": 1540,
        "wires": [
            [
                "a5445e57033f03ab"
            ],
            [
                "bd7a3b08d4b90416"
            ]
        ]
    },
    {
        "id": "32db447c7547eadb",
        "type": "file in",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "filename": "filepath",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1120,
        "y": 1720,
        "wires": [
            [
                "9b9c70ad1de4b56b"
            ]
        ]
    },
    {
        "id": "19ee5925125f783f",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "function 327",
        "func": "\n//msg.payload = msg.oldPayload.file[0].data\n\nconst decodedFilename = `/${msg.oldPayload.link}`;\n\nconst outputString = decodedFilename.replace(/י/g, '`')\nmsg.urlName = outputString \nmsg.filepath = \"/data/storage\" + outputString;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1720,
        "wires": [
            [
                "32db447c7547eadb"
            ]
        ]
    },
    {
        "id": "9b9c70ad1de4b56b",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "Create Pages",
        "func": "let str = msg.payload;\nmsg.ll = msg.payload.length;\nconst result = str.split(/\\r?\\n\\s*\\r?\\n/).map(paragraph => ({ text: paragraph }))\n\nmsg.array = result;\n\nif (msg.oldPayload.anrichment) {\n    return [null, msg]\n} else {\n    return [msg, null]\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "natural",
                "module": "natural"
            }
        ],
        "x": 1420,
        "y": 1680,
        "wires": [
            [
                "ed222f0c52f5bbc8",
                "075cd5f3c274ca98"
            ],
            [
                "3b529a0ad5978908",
                "075cd5f3c274ca98"
            ]
        ]
    },
    {
        "id": "343d6eebe20761d7",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "check file Type",
        "func": "if (msg.fileType ===\"Link\"){\n    return [msg,null,null]\n} if (msg.fileType === \"File\"){\n    return[null,msg,null]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1540,
        "wires": [
            [
                "958774fd3c549439",
                "3191ff659fb73d78"
            ],
            [
                "f32249d89e195b2d"
            ]
        ]
    },
    {
        "id": "5372b1970127ad2f",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "encoding file",
        "func": "\nlet text = msg.payload\n\nlet parts = text.split(/\\n/g).map(part => part.trim()).filter(part => part.length > 0);\n\nlet result = [];\nlet obj = {};\nfor (let i = 0; i < parts.length; i++) {\n    if (parts[i].endsWith(\"?\")) {\n        if (Object.keys(obj).length > 0) { // if 'obj' has keys\n            result.push(obj);\n            // @ts-ignore\n            obj = {};\n        }\n        obj[\"A\"] = parts[i];\n    } else {\n        if (obj[\"B\"]) {\n            obj[\"B\"] += ' ' + parts[i];\n        } else {\n            obj[\"B\"] = parts[i];\n        }\n    }\n}\n\n// Push the last object to the result if it hasn't been pushed yet\nif (Object.keys(obj).length > 0) {\n    result.push(obj);\n}\n\nmsg.array= result;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1880,
        "wires": [
            [
                "bb4cc1dcf4246d5c"
            ]
        ]
    },
    {
        "id": "0d3eaa5926f77e21",
        "type": "file in",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "filename": "filepath",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 780,
        "y": 1880,
        "wires": [
            [
                "5372b1970127ad2f"
            ]
        ]
    },
    {
        "id": "81c78fbc7d3217d5",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "FAQ",
        "func": "\nconst decodedFilename = `/${msg.oldPayload.link}`;\n\nconst outputString = decodedFilename.replace(/י/g, '`')\n\nmsg.filepath = \"/data/storage/\" + outputString;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1880,
        "wires": [
            [
                "0d3eaa5926f77e21"
            ]
        ]
    },
    {
        "id": "3745a86daf8b2d65",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "create vector",
        "func": "// delete msg.filepath;\n// delete msg.filename;\n\nmsg.collection = \"knowledgeObjects\"\n\nlet question = msg.payload.A;\nlet result = msg.payload.B;\n\nlet url = msg.oldPayload.link\n\n\nmsg.query = { \"_id\": msg._id }\nmsg.payload = {\n\n   \"$push\": {\n      \"vectors\": {\n         id: Date.now().toString(),\n         pinecone: false,\n         metadata: { url: url, question: question, result },\n      }\n   }\n\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1245,
        "y": 1940,
        "wires": [
            [
                "bb4cc1dcf4246d5c",
                "f66c0120b1f03455"
            ]
        ],
        "l": false
    },
    {
        "id": "bb4cc1dcf4246d5c",
        "type": "array-loop",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "key": "count",
        "keyType": "msg",
        "reset": false,
        "resetValue": "value-null",
        "array": "array",
        "arrayType": "msg",
        "x": 1260,
        "y": 1880,
        "wires": [
            [
                "b6866d5174367b94"
            ],
            [
                "3745a86daf8b2d65"
            ]
        ]
    },
    {
        "id": "f84baf671b6d2ba0",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "create vector",
        "func": "delete msg.filepath;\ndelete msg.filename;\ndelete msg.text;\nconst process_env = global.get(\"process_env\")\nmsg.OPENAI_API_KEY = process_env.OPENAI_API\n\nmsg.text = msg.payload.text\n  msg.messages= [\n    { \"role\": \"system\", \"content\": `create me the questionfor this text : ${msg.payload.text}`},\n     \n    ]\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1695,
        "y": 1840,
        "wires": [
            [
                "6dbf6ccd83ab84de"
            ]
        ],
        "l": false
    },
    {
        "id": "6dbf6ccd83ab84de",
        "type": "openai-ubos",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "genarate unswer",
        "model": "gpt-3.5-turbo",
        "temperature": 0.02,
        "max_tokens": 2000,
        "prompt": "",
        "frequency_penalty": 0,
        "presence_penalty": 0,
        "top_p": 1,
        "stop": {
            "type": "json",
            "value": "[]"
        },
        "OPENAI_API_KEY": "",
        "x": 1765,
        "y": 1840,
        "wires": [
            [
                "55cee18d243cb0dc"
            ]
        ],
        "l": false
    },
    {
        "id": "b70f23e2a0b3e562",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "create vector",
        "func": "msg.collection = \"knowledgeObjects\"\n\ndelete msg.filepath;\ndelete msg.filename;\n\nlet question =  msg.payload.choices[0].message.content;\nlet result = msg.text;\n\n\n\n\nmsg.query = { \"_id\": msg._id }\nmsg.payload = {\n\n   \"$push\": {\n      \"vectors\": {\n         id: Date.now().toString(),\n         pinecone: false,\n         metadata: { url: msg.urlName,question: question, result },\n      }\n   }\n\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1915,
        "y": 1840,
        "wires": [
            [
                "3b529a0ad5978908",
                "c0d0b57e2d701a7c",
                "358c2c2c2695f0ae"
            ]
        ],
        "l": false
    },
    {
        "id": "55cee18d243cb0dc",
        "type": "delay",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1845,
        "y": 1840,
        "wires": [
            [
                "b70f23e2a0b3e562"
            ]
        ],
        "l": false
    },
    {
        "id": "3b529a0ad5978908",
        "type": "array-loop",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "key": "count",
        "keyType": "msg",
        "reset": false,
        "resetValue": "value-null",
        "array": "array",
        "arrayType": "msg",
        "x": 1750,
        "y": 1760,
        "wires": [
            [
                "60a4af21e5faaa7d"
            ],
            [
                "f84baf671b6d2ba0"
            ]
        ]
    },
    {
        "id": "a6174946dc747baa",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "create vector",
        "func": "delete msg.filepath;\ndelete msg.filename;\ndelete msg.text;\nconst process_env = global.get(\"process_env\")\nmsg.OPENAI_API_KEY = process_env.OPENAI_API\n\nmsg.text = msg.payload.text[0]\n\n  msg.messages= [\n    { \"role\": \"system\", \"content\": `create me the questionfor this text : ${msg.text}`},\n     \n    ]\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1595,
        "y": 1360,
        "wires": [
            [
                "9917eac5b77b4506",
                "34f72e23a62f55f9"
            ]
        ],
        "l": false
    },
    {
        "id": "9917eac5b77b4506",
        "type": "openai-ubos",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "genarate unswer",
        "model": "gpt-3.5-turbo",
        "temperature": 0.02,
        "max_tokens": 2000,
        "prompt": "",
        "frequency_penalty": 0,
        "presence_penalty": 0,
        "top_p": 1,
        "stop": {
            "type": "json",
            "value": "[]"
        },
        "OPENAI_API_KEY": "",
        "x": 1685,
        "y": 1360,
        "wires": [
            [
                "01868ecd3acf2961"
            ]
        ],
        "l": false
    },
    {
        "id": "023264aec47fa267",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "create vector",
        "func": "msg.collection = \"knowledgeObjects\"\n\ndelete msg.filepath;\ndelete msg.filename;\n\nlet question =  msg.payload.choices[0].message.content;\nlet result = msg.text;\n\n\n\n\nmsg.query = { \"_id\": msg._id }\nmsg.payload = {\n\n   \"$push\": {\n      \"vectors\": {\n         id: Date.now().toString(),\n         pinecone: false,\n         metadata: { url: msg.urlName,question: question, result },\n      }\n   }\n\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1835,
        "y": 1360,
        "wires": [
            [
                "ca26229730123383",
                "79520be0bb6a7870",
                "34f72e23a62f55f9"
            ]
        ],
        "l": false
    },
    {
        "id": "01868ecd3acf2961",
        "type": "delay",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1775,
        "y": 1360,
        "wires": [
            [
                "023264aec47fa267"
            ]
        ],
        "l": false
    },
    {
        "id": "ca26229730123383",
        "type": "array-loop",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "key": "count",
        "keyType": "msg",
        "reset": false,
        "resetValue": "value-null",
        "array": "array",
        "arrayType": "msg",
        "x": 1670,
        "y": 1280,
        "wires": [
            [
                "665c6273f8a9b9a1"
            ],
            [
                "a6174946dc747baa"
            ]
        ]
    },
    {
        "id": "35737464a5bac056",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "reset Vectors",
        "func": "msg.collection = \"knowledgeObjects\"\n\nmsg.query = {\n    _id: objectid(msg.oldPayload.id)\n}\nmsg.payload ={\n    $set:{\n        vectors:[],\n        status:\"Dividing in process\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 130,
        "y": 1500,
        "wires": [
            [
                "d3e6e480f48e9893",
                "4e16359d860b8ded"
            ]
        ]
    },
    {
        "id": "f5a4b1e6a817c258",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 590,
        "y": 1440,
        "wires": []
    },
    {
        "id": "d3e6e480f48e9893",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "status",
        "func": "msg.payload = {\n    \"success\": true,\n    \"payload\":\"Dividing in process\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1440,
        "wires": [
            [
                "0990db20b612b892"
            ]
        ]
    },
    {
        "id": "7aa9e7878f282bf1",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "reset Vectors",
        "func": "msg.collection = \"knowledgeObjects\"\n\nmsg.query = {\n    _id: objectid(msg.oldPayload.id)\n}\nmsg.payload ={\n    $set:{\n        status:\"Divided\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1830,
        "y": 1140,
        "wires": [
            [
                "0132fdd33de3b624"
            ]
        ]
    },
    {
        "id": "665c6273f8a9b9a1",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "reset Vectors",
        "func": "msg.collection = \"knowledgeObjects\"\n\nmsg.query = {\n    _id: objectid(msg.oldPayload.id)\n}\nmsg.payload ={\n    $set:{\n        status:\"Divided\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1920,
        "y": 1280,
        "wires": [
            [
                "e0a30529618286ca"
            ]
        ]
    },
    {
        "id": "60a4af21e5faaa7d",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "reset Vectors",
        "func": "msg.collection = \"knowledgeObjects\"\n\nmsg.query = {\n    _id: objectid(msg.oldPayload.id)\n}\nmsg.payload ={\n    $set:{\n        status:\"Divided\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1920,
        "y": 1700,
        "wires": [
            [
                "72475b4c21b7e944"
            ]
        ]
    },
    {
        "id": "a5445e57033f03ab",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "reset Vectors",
        "func": "msg.collection = \"knowledgeObjects\"\n\nmsg.query = {\n    _id: objectid(msg.oldPayload.id)\n}\nmsg.payload ={\n    $set:{\n        status:\"Divided\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1940,
        "y": 1500,
        "wires": [
            [
                "250e9376a47d5b8a"
            ]
        ]
    },
    {
        "id": "b6866d5174367b94",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "reset Vectors",
        "func": "msg.collection = \"knowledgeObjects\"\n\nmsg.query = {\n    _id: objectid(msg.oldPayload.id)\n}\nmsg.payload ={\n    $set:{\n        status:\"Divided\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1450,
        "y": 1880,
        "wires": [
            [
                "5958b50f9d61ea4d"
            ]
        ]
    },
    {
        "id": "0990db20b612b892",
        "type": "delay",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 465,
        "y": 1440,
        "wires": [
            [
                "f5a4b1e6a817c258"
            ]
        ],
        "l": false
    },
    {
        "id": "21cbda1bf24a2a69",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "url": "/getVectors2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1460,
        "y": 360,
        "wires": [
            [
                "19823422f5fa86c1"
            ]
        ]
    },
    {
        "id": "19823422f5fa86c1",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "to mongoDB",
        "func": "msg.collection = \"knowledgeObjects\"\nmsg.payload ={\n_id:objectid(msg.payload.id) \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1650,
        "y": 360,
        "wires": [
            [
                "48094b3f0e2ee8d9"
            ]
        ]
    },
    {
        "id": "48094b3f0e2ee8d9",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1830,
        "y": 360,
        "wires": [
            [
                "f152600620f043bd"
            ]
        ]
    },
    {
        "id": "f152600620f043bd",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1990,
        "y": 360,
        "wires": []
    },
    {
        "id": "962290bc68cb0b29",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "update",
        "func": "const { getADAEmbedding } = global.get(\"helpers\");\n\n\nconst question = msg.fromApp.question;\nconst result = msg.fromApp.result;\nconst id = msg.fromApp.id;\nconst url = msg.fromApp.url;\n\nconst embeddingResult = await getADAEmbedding(question);\n\nmsg.payload = await msg.main.index.upsert({\n    upsertRequest: {\n        vectors: [\n            {\n                id: id,\n                values: embeddingResult,\n                metadata: { question: question, result },\n            },\n        ],\n    },\n});\n\n // Перетворіть рядок _id у об'єкт ObjectId\nlet updatedData = { url: url, question: question, result }; // Введіть тут нові дані для оновлення\nmsg.collection = \"knowledgeObjects\"\n\nmsg.query = { \"vectors.id\": id };\nmsg.payload = {\n    \"$set\": {\n        \"vectors.$\": {\n            id: id,\n            metadata: updatedData\n        }\n    }\n};\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1840,
        "y": 440,
        "wires": [
            [
                "4bfdfc1b314f7faa",
                "cf4156d5c447a16c"
            ]
        ]
    },
    {
        "id": "3ce9a2870ef10866",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "url": "/updateVector",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1470,
        "y": 440,
        "wires": [
            [
                "a69ae4c66f87b1f0",
                "c99c1f560bd3c907"
            ]
        ]
    },
    {
        "id": "14f30a7985cc31c8",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2090,
        "y": 500,
        "wires": []
    },
    {
        "id": "a69ae4c66f87b1f0",
        "type": "subflow:a36ef6d92fe6c77f",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "x": 1680,
        "y": 440,
        "wires": [
            [
                "962290bc68cb0b29"
            ]
        ]
    },
    {
        "id": "4bfdfc1b314f7faa",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "status",
        "func": "msg.payload = {\n    \"success\": true,\n    \"payload\": \"Successfully updated\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 500,
        "wires": [
            [
                "14f30a7985cc31c8"
            ]
        ]
    },
    {
        "id": "c19961b743cde705",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "url": "/deleteVector1",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 1480,
        "y": 600,
        "wires": [
            [
                "20ef169512cdd410",
                "06b21e1c324bcb90"
            ]
        ]
    },
    {
        "id": "20ef169512cdd410",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "delete",
        "func": "let vectorIds = msg.req.query.id;\n\nconst process_env = global.get(\"process_env\")\nmsg.PIPECONE_URL = process_env.PIPECONE_URL\n\nmsg.headers = {\n    'Api-Key': '3845c70b-1212-43ec-ab70-4d2abbdb58ff',\n    'Content-Type': 'application/json'\n};\n\nmsg.url = `${msg.PIPECONE_URL}/vectors/delete`;\nmsg.payload = { ids: vectorIds };\nmsg.ids = vectorIds\n\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1670,
        "y": 600,
        "wires": [
            [
                "d36889816ac0fe8e"
            ]
        ]
    },
    {
        "id": "f033b92e5ba13fcc",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2130,
        "y": 580,
        "wires": []
    },
    {
        "id": "8444301221890904",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "the end",
        "func": "const id = msg.req.query.id;\nmsg.collection = \"knowledgeObjects\"\n\nmsg.query = { \"vectors.id\": id };\nmsg.payload = {\n    \"$pull\": {\n        \"vectors\": {\n            \"id\": msg.ids\n        }\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 2000,
        "y": 600,
        "wires": [
            [
                "f033b92e5ba13fcc",
                "9b5d8966c49993cd"
            ]
        ]
    },
    {
        "id": "d36889816ac0fe8e",
        "type": "http request",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1830,
        "y": 600,
        "wires": [
            [
                "8444301221890904"
            ]
        ]
    },
    {
        "id": "5dd8bc6925a4d897",
        "type": "pdfparse",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "path": "",
        "x": 1120,
        "y": 1320,
        "wires": [
            [
                "e25c2d369acc6872"
            ]
        ]
    },
    {
        "id": "4b6f1eb42b88da74",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "check .pdf or .txt",
        "func": "if (msg.oldPayload.link.includes(\".pdf\")){\n    return[msg, null]\n}else{\n    return[null, msg]\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1320,
        "wires": [
            [
                "45d050edcec39b86"
            ],
            [
                "ba7d9ba90e21b85e"
            ]
        ]
    },
    {
        "id": "45d050edcec39b86",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "read pdf",
        "func": "\n\nconst decodedFilename = `${msg.oldPayload.link}`;\n\nconst outputString = decodedFilename.replace(/י/g, '`')\n\nmsg.path = \"/data/storage/\" + outputString;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1320,
        "wires": [
            [
                "5dd8bc6925a4d897"
            ]
        ]
    },
    {
        "id": "e53878b9d91108df",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "create payload",
        "func": "\nlet str = msg.payload\nmsg.ll = msg.payload.length;\nconst result = str.split(\".\").map(paragraph => ({ text: paragraph.split() }))\n\nmsg.array = result;\nnode.warn(msg.array)\n\nif (msg.oldPayload.anrichment) {\n    return [null, msg]\n} else {\n    return [msg, null]\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1320,
        "wires": [
            [
                "162158f556a80497",
                "0293ec9c022d79f4"
            ],
            [
                "162158f556a80497",
                "ca26229730123383"
            ]
        ]
    },
    {
        "id": "f32249d89e195b2d",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "check .pdf or .txt",
        "func": "if (msg.oldPayload.link.includes(\".pdf\")){\n    return[msg, null]\n}else{\n    return[null, msg]\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1700,
        "wires": [
            [
                "c7f2f5bb0d1a1e78"
            ],
            [
                "19ee5925125f783f"
            ]
        ]
    },
    {
        "id": "c7f2f5bb0d1a1e78",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "read pdf",
        "func": "\n\nconst decodedFilename = `${msg.oldPayload.link}`;\n\nconst outputString = decodedFilename.replace(/י/g, '`')\n\nmsg.path = \"/data/storage/\" + outputString;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1660,
        "wires": [
            [
                "840dd35450baa020"
            ]
        ]
    },
    {
        "id": "840dd35450baa020",
        "type": "pdfparse",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "path": "",
        "x": 1040,
        "y": 1660,
        "wires": [
            [
                "0582d87bd044fa4d"
            ]
        ]
    },
    {
        "id": "0582d87bd044fa4d",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "create payload",
        "func": "msg.payload = msg.payload.text\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 1660,
        "wires": [
            [
                "9b9c70ad1de4b56b"
            ]
        ]
    },
    {
        "id": "6a8ed9cc40220ef6",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "1f1b365afc8becc5",
        "name": "check command",
        "func": "if (msg.payload.content.includes('/start')) {\n    return [msg, null]\n} else {\n    return [null, msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2440,
        "wires": [
            [
                "6140c878962dd22f"
            ],
            [
                "abfb22b6518ab215"
            ]
        ]
    },
    {
        "id": "a686b4808141bbf4",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "1f1b365afc8becc5",
        "name": "",
        "url": "/demo1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2440,
        "wires": [
            [
                "6a8ed9cc40220ef6"
            ]
        ]
    },
    {
        "id": "6140c878962dd22f",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "1f1b365afc8becc5",
        "name": "/start",
        "func": "msg.payload = [{ content: '/start' }, {\n    \"content\": \"Hello\"\n}]\n\n\n// msg.payload = [{ content: '/start' }, { content: global.get('content').WELCOME_MSG }]\n\nglobal.set(`historyDemo`, [{ role: 'system' }, { role: 'assistant', content: `Hello` }])\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2400,
        "wires": [
            [
                "512bf5fd33a8679d"
            ]
        ]
    },
    {
        "id": "abfb22b6518ab215",
        "type": "subflow:a36ef6d92fe6c77f",
        "z": "8bea414da58d7b2a",
        "g": "1f1b365afc8becc5",
        "name": "",
        "x": 520,
        "y": 2480,
        "wires": [
            [
                "60e17ca1fd5bf59f"
            ]
        ]
    },
    {
        "id": "512bf5fd33a8679d",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "1f1b365afc8becc5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1300,
        "y": 2420,
        "wires": []
    },
    {
        "id": "60e17ca1fd5bf59f",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "1f1b365afc8becc5",
        "name": "get",
        "func": "\n\nconst content = msg.fromTG.content.includes(`@${global.get('process_env').BOT_NAME}`) ? msg.fromTG.content.replace(`@${global.get('process_env').BOT_NAME}`, '') : msg.fromTG.content;\n\nconst { getADAEmbedding } = global.get(\"helpers\");\n\nasync function contextAgent(objective, topK) {\n    const queryEmbedding = await getADAEmbedding(objective);\n\n    try {\n        const results = await msg.main.index.query({\n            queryRequest: {\n                vector: queryEmbedding,\n                includeMetadata: true,\n                topK,\n            },\n        });\n\n        node.warn(results )\n        const sortedResults = results.matches?.sort((a, b) => (b?.score ?? 0) - (a?.score ?? 0)) ?? [];\n   \n      return sortedResults.map(v => ({ id: v.id, question: v.metadata.question, answer: v.metadata.result}))\n    } catch (error) {\n        node.warn(error);\n    };\n}\n\nconst contextData = await contextAgent(content, 2);\n\nmsg.payload = contextData\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 2480,
        "wires": [
            [
                "d83803be20e467e5"
            ]
        ],
        "icon": "node-red/db.svg"
    },
    {
        "id": "6e171ee418466503",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "1f1b365afc8becc5",
        "name": "send history",
        "func": "const responseChatGPT = msg.payload.choices[0].message.content;\nconst history = global.get(`historyDemo`) || [];\nhistory.push({ \"role\": \"assistant\", \"content\": responseChatGPT })\nglobal.set(`historyDemo`, history);\n\n\nhistory[0] = {\n    role: 'user',\n    content: '/start'\n}\n\nconst conversation = history.map(e => ({ content: e.content.replace(/\\n/g, '') }));\nmsg.payload = conversation\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 2480,
        "wires": [
            [
                "512bf5fd33a8679d"
            ]
        ]
    },
    {
        "id": "4e16359d860b8ded",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 320,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "f66c0120b1f03455",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1440,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "5958b50f9d61ea4d",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1640,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "2eb7416a949db88c",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1890,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "250e9376a47d5b8a",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 2130,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "72475b4c21b7e944",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 2103,
        "y": 1701.2000732421875,
        "wires": [
            []
        ]
    },
    {
        "id": "c0d0b57e2d701a7c",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 2050,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "79520be0bb6a7870",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 2030,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "0132fdd33de3b624",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 2000,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "0b3b3965772292fa",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1780,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "cf4156d5c447a16c",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 2040,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "e0a30529618286ca",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 2110,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "434e200cd77ed275",
        "type": "openai-ubos",
        "z": "8bea414da58d7b2a",
        "g": "1f1b365afc8becc5",
        "name": "genarate unswer",
        "model": "gpt-3.5-turbo",
        "temperature": 0.02,
        "max_tokens": 2000,
        "prompt": "",
        "frequency_penalty": 0,
        "presence_penalty": 0,
        "top_p": 1,
        "stop": {
            "type": "json",
            "value": "[]"
        },
        "OPENAI_API_KEY": "",
        "x": 1000,
        "y": 2480,
        "wires": [
            [
                "6e171ee418466503"
            ]
        ]
    },
    {
        "id": "d83803be20e467e5",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "1f1b365afc8becc5",
        "name": "create vector",
        "func": "\nconst process_env = global.get(\"process_env\")\nmsg.OPENAI_API_KEY = process_env.OPENAI_API\n\n\nconst content = msg.fromApp.content;\nconst answer = msg.payload.length > 1 ? `${msg.payload[0].answer}\\n ${msg.payload[1].answer}` : msg.payload[0].answer\nlet historyForGPT = global.get(`historyDemo`) || [];\n\nconst historyDemo = global.get('historyDemo') ?? ['']\n\nglobal.set(`historyDemo`, [...historyDemo, { \"role\": \"user\", \"content\": content }]);\nmsg.messages =  [\n    { \"role\": \"system\", \"content\": `You are a smart and cute support bot.paraphrase this info: ${msg.payload[0].answer}` },\n    { \"role\": \"user\", \"content\": content }\n  ]\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 2480,
        "wires": [
            [
                "434e200cd77ed275"
            ]
        ]
    },
    {
        "id": "796fcd0b58916758",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "",
        "url": "/getKnowlegeObjectLink",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1500,
        "y": 120,
        "wires": [
            [
                "f7f33a86ce8d8fef"
            ]
        ]
    },
    {
        "id": "f7f33a86ce8d8fef",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "to mongoDB",
        "func": "msg.collection = \"knowledgeObjects\"\nmsg.payload ={\n'knowledgeBaseId': msg.payload.id,\n\"type\": \"Link\",\ndeleted: { $ne: true }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1730,
        "y": 120,
        "wires": [
            [
                "11bec5f579b0b092"
            ]
        ]
    },
    {
        "id": "11bec5f579b0b092",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1910,
        "y": 120,
        "wires": [
            [
                "4158be83830615bc"
            ]
        ]
    },
    {
        "id": "4158be83830615bc",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2070,
        "y": 120,
        "wires": []
    },
    {
        "id": "c4f1d18b2c5d0eb7",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "",
        "url": "/getKnowlegeObjectFiles",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1500,
        "y": 160,
        "wires": [
            [
                "292d3caa5beb7778"
            ]
        ]
    },
    {
        "id": "292d3caa5beb7778",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "to mongoDB",
        "func": "msg.collection = \"knowledgeObjects\"\nmsg.payload = {\n    'knowledgeBaseId': msg.payload.id,\n    \"type\": \"File\",\n    deleted: { $ne: true }\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1730,
        "y": 160,
        "wires": [
            [
                "76f1fd55909c53ab"
            ]
        ]
    },
    {
        "id": "76f1fd55909c53ab",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1910,
        "y": 160,
        "wires": [
            [
                "5ec283479477abe6"
            ]
        ]
    },
    {
        "id": "5ec283479477abe6",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2070,
        "y": 160,
        "wires": []
    },
    {
        "id": "42505fe8cbd4e294",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "",
        "url": "/getKnowlegeObjectFAQ",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1500,
        "y": 200,
        "wires": [
            [
                "b9c3655fb6f94525"
            ]
        ]
    },
    {
        "id": "b9c3655fb6f94525",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "to mongoDB",
        "func": "msg.collection = \"knowledgeObjects\"\nmsg.payload = {\n    'knowledgeBaseId': msg.payload.id,\n    \"type\": \"FAQ\",\n    deleted: { $ne: true }\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1730,
        "y": 200,
        "wires": [
            [
                "f6f04b7f237878d0"
            ]
        ]
    },
    {
        "id": "f6f04b7f237878d0",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1910,
        "y": 200,
        "wires": [
            [
                "862dc7094cc3702c"
            ]
        ]
    },
    {
        "id": "862dc7094cc3702c",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2070,
        "y": 200,
        "wires": []
    },
    {
        "id": "cbd939371725f5c9",
        "type": "inject",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1520,
        "y": 80,
        "wires": [
            [
                "f7f33a86ce8d8fef"
            ]
        ]
    },
    {
        "id": "db5662eacd7d9eb5",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "",
        "url": "/getKnowlegeObjectPdf",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1500,
        "y": 240,
        "wires": [
            [
                "1c2539fd446d3718"
            ]
        ]
    },
    {
        "id": "1c2539fd446d3718",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "to mongoDB",
        "func": "msg.collection = \"knowledgeObjects\"\nmsg.payload = {\n    'knowledgeBaseId': msg.payload.id,\n    \"type\": \"FilePDF\",\n    deleted: { $ne: true }\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1730,
        "y": 240,
        "wires": [
            [
                "2db2b245aa5eabb5"
            ]
        ]
    },
    {
        "id": "2db2b245aa5eabb5",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1910,
        "y": 240,
        "wires": [
            [
                "29445d42adea56dc"
            ]
        ]
    },
    {
        "id": "29445d42adea56dc",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "080a4b05e6b518fc",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2070,
        "y": 240,
        "wires": []
    },
    {
        "id": "9b5d8966c49993cd",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 2180,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "3191ff659fb73d78",
        "type": "debug",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "debug 427",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1460,
        "wires": []
    },
    {
        "id": "075cd5f3c274ca98",
        "type": "debug",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "debug 428",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 1600,
        "wires": []
    },
    {
        "id": "358c2c2c2695f0ae",
        "type": "debug",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "debug 429",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2100,
        "y": 1800,
        "wires": []
    },
    {
        "id": "162158f556a80497",
        "type": "debug",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "debug 430",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 1080,
        "wires": []
    },
    {
        "id": "f4411d154ac1cb06",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "function 328",
        "func": "msg.payload = msg.payload.text\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1235,
        "y": 1260,
        "wires": [
            [
                "cfa67c0faae732a5"
            ]
        ],
        "l": false
    },
    {
        "id": "e25c2d369acc6872",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "function 329",
        "func": "msg.payload = msg.payload.text\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1235,
        "y": 1320,
        "wires": [
            [
                "e53878b9d91108df"
            ]
        ],
        "l": false
    },
    {
        "id": "34f72e23a62f55f9",
        "type": "debug",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "debug 431",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 1420,
        "wires": []
    },
    {
        "id": "8bbeceb6411b448f",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "function 330",
        "func": "msg.payload = msg.payload.text\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1295,
        "y": 1520,
        "wires": [
            [
                "f936d8bcc43cfdf6"
            ]
        ],
        "l": false
    },
    {
        "id": "bd7a3b08d4b90416",
        "type": "delay",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1895,
        "y": 1580,
        "wires": [
            [
                "752b7200cc83b1e2"
            ]
        ],
        "l": false
    },
    {
        "id": "2b0b88cae098c7a9",
        "type": "delay",
        "z": "8bea414da58d7b2a",
        "g": "e5c2a19a4e324330",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1785,
        "y": 1180,
        "wires": [
            [
                "0293ec9c022d79f4"
            ]
        ],
        "l": false
    },
    {
        "id": "447d219e04f5c4e9",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "911c1ee2586e9d4d",
        "name": "",
        "url": "/saveToPinecone",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2160,
        "wires": [
            [
                "7be5a588bfe35ac5",
                "b453ce1aa8eb3e23",
                "690ac56690a13aa4",
                "b2634835a69a4769"
            ]
        ]
    },
    {
        "id": "7be5a588bfe35ac5",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "911c1ee2586e9d4d",
        "name": "create array",
        "func": "msg.old=msg.payload\n\nmsg.array = msg.payload.data\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2160,
        "wires": [
            [
                "6cb8466c8d27b038"
            ]
        ]
    },
    {
        "id": "6cb8466c8d27b038",
        "type": "array-loop",
        "z": "8bea414da58d7b2a",
        "g": "911c1ee2586e9d4d",
        "name": "",
        "key": "amount",
        "keyType": "msg",
        "reset": false,
        "resetValue": "value-null",
        "array": "array",
        "arrayType": "msg",
        "x": 680,
        "y": 2160,
        "wires": [
            [
                "fca11faee5518dfa"
            ],
            [
                "abf038af92f26537"
            ]
        ]
    },
    {
        "id": "abf038af92f26537",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "911c1ee2586e9d4d",
        "name": "save to pinecone",
        "func": "return msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2240,
        "wires": [
            [
                "931545f90773e617"
            ]
        ]
    },
    {
        "id": "f79c4b87e3960cf9",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "911c1ee2586e9d4d",
        "name": "post",
        "func": "const { getADAEmbedding } = global.get(\"helpers\");\nmsg.collection = \"knowledgeObjects\"\n\nconst question = msg.fromApp.question\nconst result = msg.fromApp.result\nconst url  = msg.fromApp.url\n\nconst embeddingResult = await getADAEmbedding(result);\n\nawait msg.main.index.upsert({\n    upsertRequest: {\n        vectors: [\n            {\n                id: msg.fromApp.id,\n                values: embeddingResult,\n                metadata: { url: url, question: question, result }\n            },\n        ],\n    },\n});\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 850,
        "y": 2240,
        "wires": [
            [
                "6cb8466c8d27b038",
                "ed63a752615547a1"
            ]
        ]
    },
    {
        "id": "931545f90773e617",
        "type": "subflow:a36ef6d92fe6c77f",
        "z": "8bea414da58d7b2a",
        "g": "911c1ee2586e9d4d",
        "name": "",
        "x": 700,
        "y": 2240,
        "wires": [
            [
                "f79c4b87e3960cf9"
            ]
        ]
    },
    {
        "id": "0dd7f5e7c3f02753",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "911c1ee2586e9d4d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 2060,
        "wires": []
    },
    {
        "id": "b453ce1aa8eb3e23",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "911c1ee2586e9d4d",
        "name": "status",
        "func": "msg.payload = {\n    \"success\": true,\n    \"payload\":\"Pinecone in process\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2060,
        "wires": [
            [
                "6f43f46c6d6627e4"
            ]
        ]
    },
    {
        "id": "6f43f46c6d6627e4",
        "type": "delay",
        "z": "8bea414da58d7b2a",
        "g": "911c1ee2586e9d4d",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 605,
        "y": 2060,
        "wires": [
            [
                "0dd7f5e7c3f02753"
            ]
        ],
        "l": false
    },
    {
        "id": "fca11faee5518dfa",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "911c1ee2586e9d4d",
        "name": "post",
        "func": "msg.collection = \"knowledgeObjects\"\n\nmsg.query = { \"_id\": objectid(msg.old.idBase)}\nmsg.payload = {\n    $set: {\n     status:\"Saved in Pinecone\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 830,
        "y": 2120,
        "wires": [
            [
                "96bc55efbe1eda75"
            ]
        ]
    },
    {
        "id": "96bc55efbe1eda75",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "911c1ee2586e9d4d",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1000,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "690ac56690a13aa4",
        "type": "debug",
        "z": "8bea414da58d7b2a",
        "g": "911c1ee2586e9d4d",
        "name": "debug 432",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 2220,
        "wires": []
    },
    {
        "id": "63d687c22b99e9d5",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "911c1ee2586e9d4d",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 640,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "b2634835a69a4769",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "911c1ee2586e9d4d",
        "name": "post",
        "func": "msg.collection = \"knowledgeObjects\"\n\n\n    msg.query = {\n        _id: objectid(msg.payload.data[0].idBase)\n    }\n    msg.payload = {\n        $set: {\n            status: \"Pinecone in process\"\n         \n        }\n    }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 450,
        "y": 2120,
        "wires": [
            [
                "63d687c22b99e9d5"
            ]
        ]
    },
    {
        "id": "ed63a752615547a1",
        "type": "debug",
        "z": "8bea414da58d7b2a",
        "g": "911c1ee2586e9d4d",
        "name": "debug 433",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 2240,
        "wires": []
    },
    {
        "id": "5a9cf18af75e3c0b",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "update",
        "func": "msg.collection = \"knowledgeObjects\"\n\nconst question = msg.payload.question;\nconst result = msg.payload.result;\nconst id = msg.payload.id;\nconst url = msg.payload.url;\n\n\nlet updatedData = { url: url, question: question, result };\n\n\nmsg.query = { \"vectors.id\": id };\nmsg.payload = {\n    \"$set\": {\n        \"vectors.$\": {\n            id: id,\n            metadata: updatedData\n        }\n    }\n};\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1700,
        "y": 720,
        "wires": [
            [
                "bfd25775c6570faa",
                "d92184e6adc057c5"
            ]
        ]
    },
    {
        "id": "5582346294319529",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "url": "/updateVectorOnDB",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1490,
        "y": 720,
        "wires": [
            [
                "5a9cf18af75e3c0b",
                "718ebd07aa298058"
            ]
        ]
    },
    {
        "id": "cd48cc7a92b2a3d1",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2030,
        "y": 760,
        "wires": []
    },
    {
        "id": "bfd25775c6570faa",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "status",
        "func": "msg.payload = {\n    \"success\": true,\n    \"payload\": \"Successfully updated\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 760,
        "wires": [
            [
                "cd48cc7a92b2a3d1"
            ]
        ]
    },
    {
        "id": "d92184e6adc057c5",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1920,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "d648ea43ba5a7657",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "the end",
        "func": "\nmsg.collection = \"knowledgeObjects\"\nconst id = msg.req.query.id;\n\nmsg.query = { \"vectors.id\": id };\nmsg.payload = {\n    \"$pull\": {\n        \"vectors\": {\n            \"id\": id\n        }\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1720,
        "y": 860,
        "wires": [
            [
                "5bb720dc3ef56b7a",
                "99ad91f7fb16dfbc"
            ]
        ]
    },
    {
        "id": "8c5c228aa9202f2b",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "url": "/deleteVectorDB",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 1490,
        "y": 860,
        "wires": [
            [
                "d648ea43ba5a7657",
                "5a3203eb955fd7d9"
            ]
        ]
    },
    {
        "id": "5bb720dc3ef56b7a",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1850,
        "y": 840,
        "wires": []
    },
    {
        "id": "99ad91f7fb16dfbc",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1880,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "718ebd07aa298058",
        "type": "debug",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "debug 434",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 800,
        "wires": []
    },
    {
        "id": "5a3203eb955fd7d9",
        "type": "debug",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "debug 435",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 900,
        "wires": []
    },
    {
        "id": "c99c1f560bd3c907",
        "type": "debug",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "debug 436",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 520,
        "wires": []
    },
    {
        "id": "06b21e1c324bcb90",
        "type": "debug",
        "z": "8bea414da58d7b2a",
        "g": "bc79b0c55ed950a2",
        "name": "debug 437",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 660,
        "wires": []
    },
    {
        "id": "9c630c78fbfe702f",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "url": "/createBaseKnowlege",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "e9f90d7b7902781f"
            ]
        ]
    },
    {
        "id": "e9f90d7b7902781f",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "to mongoDB",
        "func": "msg.collection = \"knowlegebase\"\nmsg.payload ={\n    _id: objectid(),\n   name: msg.payload.name\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 410,
        "y": 100,
        "wires": [
            [
                "1c1f174f8766fde7"
            ]
        ]
    },
    {
        "id": "1c1f174f8766fde7",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "links": [
            "8771d95b528d34d0"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 610,
        "y": 100,
        "wires": [
            [
                "6bd7710803f1d820"
            ]
        ]
    },
    {
        "id": "6bd7710803f1d820",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "to front",
        "func": "msg.payload = {\n    \"success\": true,\n    \"payload\": \"Successfully created\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 100,
        "wires": [
            [
                "6fc91f5c4d0e3490"
            ]
        ]
    },
    {
        "id": "6fc91f5c4d0e3490",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 950,
        "y": 100,
        "wires": []
    },
    {
        "id": "7794a2dcd291f245",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "url": "/updateBaseKnowlege",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 180,
        "wires": [
            [
                "771b80b405675487"
            ]
        ]
    },
    {
        "id": "771b80b405675487",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "to mongoDB",
        "func": "msg.collection = \"knowlegebase\"\nmsg.query = {\n    _id: objectid(msg.req.query._id)\n}\nmsg.payload={\n    $set:{\n       name: msg.payload.name\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 410,
        "y": 180,
        "wires": [
            [
                "690fdc4d68fe1d5f"
            ]
        ]
    },
    {
        "id": "690fdc4d68fe1d5f",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 620,
        "y": 180,
        "wires": [
            [
                "18a42dddddf41c82"
            ]
        ]
    },
    {
        "id": "18a42dddddf41c82",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "to front",
        "func": "msg.payload = {\n    \"success\": true,\n    \"payload\": \"Successfully updated\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 180,
        "wires": [
            [
                "f49f71f083baf7bb"
            ]
        ]
    },
    {
        "id": "f49f71f083baf7bb",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 950,
        "y": 180,
        "wires": []
    },
    {
        "id": "166fc8df26886326",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "to mongoDB",
        "func": "msg.collection = \"knowlegebase\"\nmsg.payload ={\n_id: objectid(msg.payload.id)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 370,
        "y": 540,
        "wires": [
            [
                "744c953cef4529af"
            ]
        ]
    },
    {
        "id": "e2e224e9d9c8f414",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "url": "/getBaseKnowlegeById",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 540,
        "wires": [
            [
                "166fc8df26886326"
            ]
        ]
    },
    {
        "id": "744c953cef4529af",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 530,
        "y": 540,
        "wires": [
            [
                "8408b89d02834f5b"
            ]
        ]
    },
    {
        "id": "8408b89d02834f5b",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 540,
        "wires": []
    },
    {
        "id": "c4901f905e27c955",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "url": "/getBaseKnowlege",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "19a23ca1d1daa384"
            ]
        ]
    },
    {
        "id": "19a23ca1d1daa384",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "to mongoDB",
        "func": "msg.collection = \"knowlegebase\"\nmsg.payload ={\n    deleted: { $ne: true }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 350,
        "y": 460,
        "wires": [
            [
                "e8bcabbaf9f5fe0f"
            ]
        ]
    },
    {
        "id": "e8bcabbaf9f5fe0f",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 530,
        "y": 460,
        "wires": [
            [
                "f50bcabc95bf1078"
            ]
        ]
    },
    {
        "id": "2e3e257789bb525c",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 460,
        "wires": []
    },
    {
        "id": "f50bcabc95bf1078",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "to mongoDB",
        "func": "msg.old = msg.payload\nmsg.collection = \"knowledgeObjects\"\nmsg.payload = {\n    deleted: { $ne: true }\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 710,
        "y": 460,
        "wires": [
            [
                "54d5461f44e49a0b"
            ]
        ]
    },
    {
        "id": "54d5461f44e49a0b",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 870,
        "y": 460,
        "wires": [
            [
                "bacb447dffc74ab2"
            ]
        ]
    },
    {
        "id": "bacb447dffc74ab2",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "to front",
        "func": "msg.payload =msg.old.map((e) => ({\n    ...e,\n    total: msg.payload.filter((el) => el.knowledgeBaseId === e._id.toString() ).length,\n    links: msg.payload.filter((el) => el.knowledgeBaseId === e._id.toString() && el.type === 'Link').length,\n    files: msg.payload.filter((el) => el.knowledgeBaseId === e._id.toString() && el.type === 'File' ).length,\n    filesFAQ: msg.payload.filter((el) => el.knowledgeBaseId === e._id.toString() && el.type === 'FAQ' ).length,\n    filesPDF: msg.payload.filter((el) => el.knowledgeBaseId === e._id.toString() && el.type === 'FilePDF').length\n})); \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 460,
        "wires": [
            [
                "2e3e257789bb525c",
                "048a0a6024661886"
            ]
        ]
    },
    {
        "id": "8549735ed2fe7cb9",
        "type": "inject",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "19a23ca1d1daa384"
            ]
        ]
    },
    {
        "id": "048a0a6024661886",
        "type": "debug",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "debug 423",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 420,
        "wires": []
    },
    {
        "id": "45ff3c83b4ab9c78",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "url": "/updateObjectsBase",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 150,
        "y": 640,
        "wires": [
            [
                "12a9ae1d23901673"
            ]
        ]
    },
    {
        "id": "12a9ae1d23901673",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "check type",
        "func": "\nmsg.collection = \"knowledgeObjects\";\nmsg.oldPayload = msg.req.query\nmsg.type = msg.req.query.type\nmsg._id = objectid();\n\nif (msg.req.files && msg.req.files[0].mimetype === \"application/pdf\"){\n    msg.type = \"FilePDF\"\n\n    return [null, null, msg]\n}\n\n\nif(msg.type ===\"Link\"){\n    return [msg,null,null]\n}\nif(msg.type ===\"FAQ\"){\n    return[null,msg,null]\n} if (msg.type === \"File\" || msg.type === \"FilePDF\"){\nreturn[null,null,msg]\n}\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 390,
        "y": 640,
        "wires": [
            [
                "d3d95030bea6cb46"
            ],
            [
                "b43d308601b00756"
            ],
            [
                "3b9cee03775bb4e2"
            ]
        ]
    },
    {
        "id": "d3d95030bea6cb46",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "link",
        "func": "\nmsg.url = msg.oldPayload.link;\n\n\nmsg.payload = {\n    _id: msg._id,\n    knowledgeBaseId: msg.oldPayload.id,\n    url: msg.url,\n    type: msg.type,\n    name: msg.oldPayload.name,\n    vectors: [],\n    status: \"Source saved\",\n    deleted: false,\n    createdAt: new Date()\n};\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 530,
        "y": 600,
        "wires": [
            [
                "1c2bb360ac942ebc"
            ]
        ]
    },
    {
        "id": "b43d308601b00756",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "faq",
        "func": "msg.buffer = msg.payload.file[0].data\n\nmsg.decodedFilename = '/data/storage/' + msg.oldPayload.file[0].name;\n\nmsg.payload = {\n    _id: msg._id,\n    knowledgeBaseId: msg.oldPayload.id,\n    name: msg.oldPayload.file[0].name,\n    type: \"FAQ\",\n    file: msg.oldPayload.file[0].name,\n    vectors: [],\n    status: \"Source saved\",\n    deleted: false,\n    createdAt: new Date()\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 530,
        "y": 640,
        "wires": [
            [
                "1c2bb360ac942ebc",
                "389c9d57e6764f40"
            ]
        ]
    },
    {
        "id": "3b9cee03775bb4e2",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "file",
        "func": "msg.buffer = msg.req.files[0].buffer\n\nmsg.decodedFilename = '/data/storage/' + msg.req.files[0].originalname\n\nmsg.payload = {\n    _id: msg._id,\n    knowledgeBaseId: msg.oldPayload.id,\n    name: msg.req.files[0].originalname,\n    type: msg.type,\n    file: msg.req.files[0].originalname,\n    vectors: [],\n    status: \"Source saved\",\n    deleted: false,\n    createdAt: new Date()\n};\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 530,
        "y": 680,
        "wires": [
            [
                "1c2bb360ac942ebc",
                "389c9d57e6764f40",
                "f967b27837fecfdd"
            ]
        ]
    },
    {
        "id": "1c2bb360ac942ebc",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "links": [
            "8771d95b528d34d0"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 750,
        "y": 640,
        "wires": [
            [
                "223ca06ca0f8571c"
            ]
        ]
    },
    {
        "id": "223ca06ca0f8571c",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "status",
        "func": "msg.payload = {\n    \"success\": true,\n    \"payload\": \"Successfully updated\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 640,
        "wires": [
            [
                "9a230e7c818e0e24"
            ]
        ]
    },
    {
        "id": "9a230e7c818e0e24",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 640,
        "wires": []
    },
    {
        "id": "389c9d57e6764f40",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "write to file",
        "func": "msg.payload = msg.buffer\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 680,
        "wires": [
            [
                "2f4beb7952be87f4"
            ]
        ]
    },
    {
        "id": "2f4beb7952be87f4",
        "type": "file",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "filename": "decodedFilename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 900,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "ec1fa013809c2a8e",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "update knowlegebase",
        "func": "msg.collection = \"knowlegebase\"\n\nmsg.query={\n    _id: objectid(msg.req.query.id)\n}\n\nmsg.payload={\n    $set:{\n    'deleted': true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 360,
        "y": 260,
        "wires": [
            [
                "463bc001e4ac3724"
            ]
        ]
    },
    {
        "id": "b9a9ed30709f11c9",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "url": "/deleteBase",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "ec1fa013809c2a8e",
                "24a270db9a48eed1",
                "1801d832c75cc75b"
            ]
        ]
    },
    {
        "id": "463bc001e4ac3724",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 600,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "24a270db9a48eed1",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "update knowledgeObjects",
        "func": "msg.collection = \"knowledgeObjects\"\nmsg.query = {\n    'knowledgeBaseId': msg.req.query.id,\n}\n\nmsg.payload = {\n    $set: {\n        'deleted': true\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 300,
        "wires": [
            [
                "9ccf501c4980a045"
            ]
        ]
    },
    {
        "id": "9ccf501c4980a045",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 600,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "1801d832c75cc75b",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "get knowledgeObjects",
        "func": "msg.old=msg.payload\nmsg.collection = \"knowledgeObjects\"\nmsg.payload = {\n    'knowledgeBaseId': msg.req.query.id\n}\n\n// msg.payload = {\n//     $set: {\n//         'deleted': true\n//     }\n// }\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 340,
        "wires": [
            [
                "69bd6d7e22148f1f"
            ]
        ]
    },
    {
        "id": "69bd6d7e22148f1f",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 590,
        "y": 340,
        "wires": [
            [
                "0db93a79fec638c1"
            ]
        ]
    },
    {
        "id": "0db93a79fec638c1",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "delete",
        "func": "let toDelete = msg.payload.filter(e => e.status === 'Saved in Pinecone')\nif (toDelete.length>0){\n    let vectorIds = toDelete.flatMap(e => e.vectors).map(e=> e.id);\nconst process_env = global.get(\"process_env\")\nmsg.headers = {\n    'Api-Key':process_env.PIPECONE_API,\n    'Content-Type': 'application/json'\n};\n    msg.PIPECONE_URL = process_env.PIPECONE_URL\n    msg.url = `${msg.PIPECONE_URL}/vectors/delete`;\nmsg.payload = { ids: vectorIds };\nmsg.ids = vectorIds\n    return [msg,null];\n}\nelse{\n    return[null,msg]\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 730,
        "y": 340,
        "wires": [
            [
                "6d2119a90f113bc7"
            ],
            [
                "12650f94df4b7bdb"
            ]
        ]
    },
    {
        "id": "6d2119a90f113bc7",
        "type": "http request",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 340,
        "wires": [
            [
                "a0e0e2bf42c038d8"
            ]
        ]
    },
    {
        "id": "7ff484f04f036fae",
        "type": "http in",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "url": "/deleteBaseObject",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 800,
        "wires": [
            [
                "4bf450cf643022a7",
                "e3ac9e8aee2909b3"
            ]
        ]
    },
    {
        "id": "4bf450cf643022a7",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "update knowledgeObjects",
        "func": "msg.collection = \"knowledgeObjects\"\nmsg.query = {\n    '_id': objectid(msg.req.query.id) ,\n}\n\nmsg.payload = {\n    $set: {\n        'deleted': true\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 400,
        "y": 780,
        "wires": [
            [
                "33bd23245aa30043"
            ]
        ]
    },
    {
        "id": "e3ac9e8aee2909b3",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "get knowledgeObjects",
        "func": "msg.old = msg.req.query.id\nmsg.collection = \"knowledgeObjects\"\nmsg.payload = {\n    '_id': objectid(msg.req.query.id)\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 380,
        "y": 820,
        "wires": [
            [
                "82a319adbb1186f9"
            ]
        ]
    },
    {
        "id": "33bd23245aa30043",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "links": [
            "d1949ed8cdf3c5ed"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 640,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "82a319adbb1186f9",
        "type": "link call",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "links": [
            "2677414dc3b763e4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 570,
        "y": 820,
        "wires": [
            [
                "cdc9d2d5e10fc245"
            ]
        ]
    },
    {
        "id": "cdc9d2d5e10fc245",
        "type": "function",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "delete",
        "func": "\nlet toDelete = msg.payload.filter(e => e.status === 'Saved in Pinecone')\n\nif (toDelete.length > 0) {\n    let vectorIds = toDelete.flatMap(e => e.vectors).map(e => e.id);\n    node.warn(vectorIds);\n\n\n    const process_env = global.get(\"process_env\")\n    msg.PIPECONE_URL = process_env.PIPECONE_URL\n    msg.headers = {\n        'Api-Key': process_env.PIPECONE_API,\n        'Content-Type': 'application/json'\n    };\n\n    msg.url = `${msg.PIPECONE_UR}/vectors/delete`;\n    msg.payload = { ids: vectorIds };\n    msg.ids = vectorIds\n    return [msg, null];\n}\nelse {\n    return [null, msg]\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 710,
        "y": 820,
        "wires": [
            [
                "ef20b72d14fc716d"
            ],
            [
                "15dc2420f0bbb19f"
            ]
        ]
    },
    {
        "id": "ef20b72d14fc716d",
        "type": "http request",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 870,
        "y": 800,
        "wires": [
            [
                "cce6afd14b41a461"
            ]
        ]
    },
    {
        "id": "cce6afd14b41a461",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1010,
        "y": 800,
        "wires": []
    },
    {
        "id": "a0e0e2bf42c038d8",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1030,
        "y": 340,
        "wires": []
    },
    {
        "id": "12650f94df4b7bdb",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 870,
        "y": 300,
        "wires": []
    },
    {
        "id": "15dc2420f0bbb19f",
        "type": "http response",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 860,
        "wires": []
    },
    {
        "id": "f967b27837fecfdd",
        "type": "debug",
        "z": "8bea414da58d7b2a",
        "g": "f492b6dff51635a4",
        "name": "debug 439",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 720,
        "wires": []
    }
]